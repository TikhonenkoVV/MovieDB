{"version":3,"file":"static/js/387.fafa8ba1.chunk.js","mappings":"8MAEaA,EAAYC,EAAAA,EAAAA,GAAH,+FACT,qBAAGC,MAAkBC,OAAOC,SAA5B,IAEW,qBAAGF,MAAkBG,cAArB,IAGXC,EAAWL,EAAAA,EAAAA,GAAH,oPAGL,mBAAoC,EAApC,EAAGC,MAAkBK,QAAQC,IAA7B,IAMHC,EAAcR,EAAAA,EAAAA,GAAH,yNAGX,qBAAGC,MAAkBC,OAAOO,KAA5B,IACW,qBAAGR,MAAkBC,OAAOQ,MAA5B,IAQXC,EAAYX,EAAAA,EAAAA,IAAH,iJ,4DCrBTY,EAAO,WAChB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAwBJ,EAAAA,EAAAA,UAAS,MAAjC,eAAOK,EAAP,KAAaC,EAAb,KAwBA,OAtBAC,EAAAA,EAAAA,YAAU,WACN,GAAKT,EAAL,CACA,IAAMU,EAAOV,EAAQW,MAAM,KAAK,GAC1BC,EAAKZ,EAAQW,MAAM,KAAK,GAC9BP,GAAa,IACbS,EAAAA,EAAAA,IACIH,EACAE,EACS,UAATF,EAAmB,WAAa,sBAE/BI,MAAK,SAAAC,GACFP,GAAQQ,EAAAA,EAAAA,IAAcD,EAAKR,MAC9B,IACAU,OAAM,SAAAC,GACHZ,EAASY,EAAIC,UACbC,EAAAA,EAAAA,IAAMF,EAAIC,QACb,IACAE,SAAQ,WACLjB,GAAa,EAChB,GAlBe,CAmBvB,GAAE,CAACJ,KAGA,gCACKG,IAAa,SAACmB,EAAA,EAAD,KACT,OAAJf,QAAI,IAAJA,OAAA,EAAAA,EAAMgB,QAAS,IACZ,iCACI,SAACrC,EAAD,oBACA,SAACM,EAAD,iBACKe,QADL,IACKA,OADL,EACKA,EAAMiB,KACH,gBAAGZ,EAAH,EAAGA,GAAIa,EAAP,EAAOA,OAAQC,EAAf,EAAeA,OAAQC,EAAvB,EAAuBA,WAAYC,EAAnC,EAAmCA,KAAnC,OACI,SAACjC,EAAD,WACI,UAAC,KAAD,CACIkC,MAAO,CACHC,MAAO,OACPC,QAAS,OACTC,cAAe,SACfC,cAAe,QAEnBC,GAAE,kBAAatB,GAPnB,WASI,SAACd,EAAD,CACIqC,IAAKT,EACLU,IAAKT,KAET,4BACI,wBACI,uBAAIA,OAER,uBAAIC,WAlBEH,EADtB,UA4BX,OAAJlB,QAAI,IAAJA,OAAA,EAAAA,EAAMgB,QAAS,IACZ,SAACrC,EAAD,oDAEHmB,IAAS,SAAC,KAAD,MAGrB,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastTitle = styled.h2`\n    color: ${({ theme }) => theme.colors.themeText};\n    margin-bottom: 20px;\n    transition: color ${({ theme }) => theme.baseTransition};\n`;\n\nexport const CastGrid = styled.ul`\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));\n    grid-gap: ${({ theme }) => theme.spacing.step * 5}px;\n    @media (min-width: 533px) {\n        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\n    }\n`;\n\nexport const CastElement = styled.li`\n    display: flex;\n    flex-direction: column;\n    color: ${({ theme }) => theme.colors.white};\n    background-color: ${({ theme }) => theme.colors.accent};\n    & p {\n        padding: 0 5px;\n        line-height: 1.3;\n        text-align: center;\n    }\n`;\n\nexport const CastPhoto = styled.img`\n    width: 100%;\n    object-fit: cover;\n    object-position: top;\n    aspect-ratio: 3 / 4;\n    margin-bottom: 10px;\n`;\n","import { Link, useParams } from 'react-router-dom';\nimport { CastElement, CastGrid, CastPhoto, CastTitle } from './Cast.styled';\nimport { useEffect, useState } from 'react';\nimport { getDetails } from 'services/api';\nimport { Loader } from 'components/Loader/Loader';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { normalizeCast } from 'services/normalize';\n\nexport const Cast = () => {\n    const { mediaId } = useParams();\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState([]);\n    const [cast, setCast] = useState(null);\n\n    useEffect(() => {\n        if (!mediaId) return;\n        const type = mediaId.split('-')[0];\n        const id = mediaId.split('-')[1];\n        setIsLoading(true);\n        getDetails(\n            type,\n            id,\n            type === 'movie' ? '/credits' : '/aggregate_credits'\n        )\n            .then(data => {\n                setCast(normalizeCast(data.cast));\n            })\n            .catch(err => {\n                setError(err.message);\n                toast(err.message);\n            })\n            .finally(() => {\n                setIsLoading(false);\n            });\n    }, [mediaId]);\n\n    return (\n        <>\n            {isLoading && <Loader />}\n            {cast?.length > 0 && (\n                <>\n                    <CastTitle>Cast</CastTitle>\n                    <CastGrid>\n                        {cast?.map(\n                            ({ id, castId, poster, personName, role }) => (\n                                <CastElement key={castId}>\n                                    <Link\n                                        style={{\n                                            width: '100%',\n                                            display: 'flex',\n                                            flexDirection: 'column',\n                                            paddingBottom: '10px',\n                                        }}\n                                        to={`/person/${id}`}\n                                    >\n                                        <CastPhoto\n                                            src={poster}\n                                            alt={personName}\n                                        />\n                                        <div>\n                                            <p>\n                                                <b>{personName}</b>\n                                            </p>\n                                            <p>{role}</p>\n                                        </div>\n                                    </Link>\n                                </CastElement>\n                            )\n                        )}\n                    </CastGrid>\n                </>\n            )}\n            {cast?.length < 1 && (\n                <CastTitle>Sorry, no cast information available.</CastTitle>\n            )}\n            {error && <ToastContainer />}\n        </>\n    );\n};\n"],"names":["CastTitle","styled","theme","colors","themeText","baseTransition","CastGrid","spacing","step","CastElement","white","accent","CastPhoto","Cast","mediaId","useParams","useState","isLoading","setIsLoading","error","setError","cast","setCast","useEffect","type","split","id","getDetails","then","data","normalizeCast","catch","err","message","toast","finally","Loader","length","map","castId","poster","personName","role","style","width","display","flexDirection","paddingBottom","to","src","alt"],"sourceRoot":""}