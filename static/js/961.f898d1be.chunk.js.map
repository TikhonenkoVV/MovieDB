{"version":3,"file":"static/js/961.f898d1be.chunk.js","mappings":"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","sources":["components/Loader.jsx","components/CreditsItem/CreditsItem.styled.js","components/CreditsItem/CreditsItem.jsx","components/Credits/Credits.styled.js","components/Credits/Credits.jsx","services/normalize/normalizeActing.js","services/normalize/normalizePersonInCrew.js","components/PersonInfo/PersonInfo.styled.js","components/PersonInfo/PersonInfo.jsx","pages/PersonDetails.jsx","services/normalize/normalizePersonData.js","services/api.js","services/dateOperations.js"],"sourcesContent":["import { ThreeCircles } from 'react-loader-spinner';\nimport { BackDrop } from './BackDrop/BackDrop';\n\nexport const Loader = () => {\n    return (\n        <BackDrop>\n            <ThreeCircles\n                height=\"100\"\n                width=\"100\"\n                color=\"#369daf\"\n                wrapperStyle={{\n                    position: 'absolute',\n                    top: '50%',\n                    left: '50%',\n                    transform: 'translate(-50%, -50%)',\n                }}\n                wrapperClass=\"\"\n                visible={true}\n                ariaLabel=\"three-circles-rotating\"\n                outerCircleColor=\"\"\n                innerCircleColor=\"\"\n                middleCircleColor=\"\"\n            />\n        </BackDrop>\n    );\n};\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const Item = styled.li`\n    &:not(:last-child) {\n        margin-bottom: 16px;\n    }\n`;\n\nexport const StyledLink = styled(Link)`\n    display: flex;\n    gap: 16px;\n`;\n\nexport const ImageWrapper = styled.div`\n    flex-shrink: 0;\n    width: 70px;\n    height: 105px;\n    overflow: hidden;\n`;\n\nexport const Title = styled.h3`\n    margin-bottom: 12px;\n`;\n","import { ImageWrapper, Item, StyledLink, Title } from './CreditsItem.styled';\nimport noPoster from '../../images/no-poster.jpg';\n\nexport const CreditsItem = ({ credits }) => {\n    const IMAGES_BASE_URL = 'https://image.tmdb.org/t/p/w200';\n    const IMAGES_BASE_URL_RETINA = 'https://image.tmdb.org/t/p/w400';\n\n    return credits?.map(\n        ({\n            id,\n            credit_id,\n            poster_path,\n            movieTitle,\n            personCharacter,\n            releaseDate,\n            media_type,\n            vote_average,\n        }) => (\n            <Item key={credit_id}>\n                <StyledLink\n                    to={\n                        media_type === 'movie'\n                            ? `/movies/movie-${id}`\n                            : `/tv-shows/tv-${id}`\n                    }\n                    state={{ mediaTypes: media_type }}\n                >\n                    <ImageWrapper>\n                        <picture>\n                            <source\n                                srcSet={\n                                    poster_path\n                                        ? `${\n                                              IMAGES_BASE_URL + poster_path\n                                          } 1x, ${\n                                              IMAGES_BASE_URL_RETINA +\n                                              poster_path\n                                          } 2x`\n                                        : noPoster\n                                }\n                            />\n\n                            <img\n                                style={{\n                                    width: '100%',\n                                    height: '100%',\n                                    objectFit: 'cover',\n                                }}\n                                width={50}\n                                height={75}\n                                src={\n                                    poster_path\n                                        ? IMAGES_BASE_URL + poster_path\n                                        : noPoster\n                                }\n                                alt={movieTitle}\n                            />\n                        </picture>\n                    </ImageWrapper>\n                    <div>\n                        <Title>{movieTitle}</Title>\n                        {personCharacter && <p>Character: {personCharacter}</p>}\n                        <p>Year: {releaseDate}</p>\n                        <p>User score: {vote_average}</p>\n                    </div>\n                </StyledLink>\n            </Item>\n        )\n    );\n};\n","import styled from '@emotion/styled';\n\nexport const Title = styled.h2`\n    margin-bottom: 24px;\n`;\n\nexport const CreditsList = styled.ul`\n    padding: 24px;\n    margin-bottom: 24px;\n    border: 1px solid gray;\n`;\n","import { CreditsItem } from 'components/CreditsItem/CreditsItem';\nimport { CreditsList, Title } from './Credits.styled';\nimport { normalizeActing } from 'services/normalize/normalizeActing';\nimport { normalizePersonInCrew } from 'services/normalize/normalizePersonInCrew';\n\nexport const Credits = ({ acting, crew }) => {\n    const personActing = normalizeActing(acting);\n    const personInCrew = normalizePersonInCrew(crew);\n\n    return (\n        <>\n            {personActing?.length > 0 && (\n                <>\n                    <Title>Acting</Title>\n                    <CreditsList>\n                        <CreditsItem credits={personActing} />\n                    </CreditsList>\n                </>\n            )}\n            {personInCrew?.length > 0 && (\n                <>\n                    <Title>Crew</Title>\n                    {personInCrew?.map((el, i) => (\n                        <CreditsList key={i}>\n                            <li>\n                                <Title>{Object.keys(el)[0]}</Title>\n                                <ul>\n                                    <CreditsItem\n                                        credits={el[Object.keys(el)]}\n                                    />\n                                </ul>\n                            </li>\n                        </CreditsList>\n                    ))}\n                </>\n            )}\n        </>\n    );\n};\n","export const normalizeActing = data => {\n    const nA = 'N/a';\n    let futureDate = new Date();\n    futureDate = new Date(futureDate.getTime() + 1000 * 60 * 60 * 24 * 730);\n    const res = data.map(\n        ({\n            id,\n            credit_id,\n            poster_path,\n            title,\n            original_title,\n            name,\n            original_name,\n            character,\n            release_date,\n            vote_average,\n            first_air_date,\n            media_type,\n        }) => {\n            const movieTitle = title\n                ? title\n                : name\n                ? name\n                : original_title\n                ? original_title\n                : original_name;\n            const personCharacter = character ? character : nA;\n            let releaseDate = release_date\n                ? release_date\n                : first_air_date\n                ? first_air_date\n                : nA;\n            const sortDate = () => {\n                if (releaseDate !== nA) {\n                    return new Date(releaseDate).getTime();\n                } else return new Date(futureDate).getTime();\n            };\n            if (releaseDate !== nA) {\n                releaseDate = new Date(releaseDate).getFullYear();\n            } else {\n                releaseDate = nA;\n            }\n            return {\n                id,\n                credit_id,\n                poster_path,\n                movieTitle,\n                personCharacter,\n                releaseDate,\n                sortDate: sortDate(),\n                media_type,\n                vote_average:\n                    vote_average > 0\n                        ? `${Math.round(vote_average * 10)}%`\n                        : 'NR',\n            };\n        }\n    );\n    const result = res.sort((a, b) => b.sortDate - a.sortDate);\n\n    return result;\n};\n","export const normalizePersonInCrew = crew => {\n    const nA = 'N/a';\n    const res = crew?.map(\n        ({\n            id,\n            credit_id,\n            title,\n            original_title,\n            name,\n            original_name,\n            poster_path,\n            job,\n            release_date,\n            first_air_date,\n            vote_average,\n            media_type,\n        }) => {\n            let futureDate = new Date();\n            futureDate = new Date(\n                futureDate.getTime() + 1000 * 60 * 60 * 24 * 730\n            );\n\n            const movieTitle = title\n                ? title\n                : name\n                ? name\n                : original_title\n                ? original_title\n                : original_name;\n\n            let releaseDate = release_date\n                ? release_date\n                : first_air_date\n                ? first_air_date\n                : nA;\n\n            const sortDate = () => {\n                if (releaseDate !== nA) {\n                    return new Date(releaseDate).getTime();\n                } else return new Date(futureDate).getTime();\n            };\n            if (releaseDate !== nA) {\n                releaseDate = new Date(releaseDate).getFullYear();\n            } else {\n                releaseDate = nA;\n            }\n\n            return {\n                id,\n                credit_id,\n                poster_path,\n                movieTitle,\n                job,\n                releaseDate,\n                sortDate: sortDate(),\n                media_type,\n                vote_average:\n                    vote_average > 0\n                        ? `${Math.round(vote_average * 10)}%`\n                        : 'NR',\n            };\n        }\n    );\n\n    const sortedResByDate = res?.sort((a, b) => b.sortDate - a.sortDate);\n\n    const list = [];\n    sortedResByDate?.map(el => {\n        if (!list.includes(el.job)) {\n            return list.push(el.job);\n        } else return null;\n    });\n\n    const result = list.map(res => {\n        let result = [];\n        sortedResByDate.map(el => {\n            if (el.job === res) {\n                return result.push(el);\n            } else return null;\n        });\n        return { [res]: result };\n    });\n\n    return result;\n};\n","import styled from '@emotion/styled';\n\nexport const PersonWrapper = styled.div`\n    display: flex;\n    align-items: flex-start;\n    gap: 24px;\n    color: ${({ theme }) => theme.colors.themeText};\n`;\n\nexport const Aside = styled.aside`\n    flex-shrink: 0;\n    width: 348px;\n    padding: 24px;\n    background-color: ${({ theme }) => theme.colors.personBackground};\n`;\n\nexport const AsideTitle = styled.h2`\n    margin-bottom: 24px;\n`;\n\nexport const PersonalInfoList = styled.ul``;\n\nexport const PersonalInfoItem = styled.li`\n    margin-bottom: 12px;\n`;\n\nexport const MinorTitle = styled.h3`\n    margin-bottom: 12px;\n`;\n\nexport const InfoWrapper = styled.div`\n    flex-grow: 1;\n`;\n\nexport const ProfileWrapper = styled.div`\n    margin-bottom: 40px;\n`;\nexport const PersonTitle = styled.h1`\n    font-size: 36px;\n    margin-bottom: 40px;\n`;\n","import { Credits } from 'components/Credits/Credits';\nimport {\n    Aside,\n    AsideTitle,\n    InfoWrapper,\n    MinorTitle,\n    PersonTitle,\n    PersonWrapper,\n    PersonalInfoItem,\n    PersonalInfoList,\n    ProfileWrapper,\n} from './PersonInfo.styled';\nimport noPoster from '../../images/no-poster.jpg';\n\nexport const PersonInfo = ({ person, acting, crew, total }) => {\n    const IMAGES_BASE_URL = 'https://image.tmdb.org/t/p/w300_and_h450_bestv2';\n    const IMAGES_BASE_URL_RETINA =\n        'https://image.tmdb.org/t/p/w600_and_h900_bestv2';\n\n    const {\n        biography,\n        known_for_department,\n        name,\n        gender,\n        birthday,\n        deathday,\n        age,\n        place_of_birth,\n        profile_path,\n    } = person;\n\n    return (\n        <PersonWrapper>\n            <Aside>\n                <picture>\n                    <source\n                        srcSet={\n                            profile_path\n                                ? `${IMAGES_BASE_URL + profile_path} 1x, \n                                   ${IMAGES_BASE_URL_RETINA + profile_path} 2x`\n                                : noPoster\n                        }\n                    />\n\n                    <img\n                        src={\n                            profile_path\n                                ? IMAGES_BASE_URL + profile_path\n                                : noPoster\n                        }\n                        alt={name}\n                        width={300}\n                        height={450}\n                        style={{ marginBottom: '24px' }}\n                    />\n                </picture>\n                <AsideTitle>Personal Info</AsideTitle>\n                <PersonalInfoList>\n                    <PersonalInfoItem>\n                        <MinorTitle>Known for</MinorTitle>\n                        <p>{known_for_department}</p>\n                    </PersonalInfoItem>\n                    <PersonalInfoItem>\n                        <MinorTitle>Known credits</MinorTitle>\n                        <p>{total ?? 'N/a'}</p>\n                    </PersonalInfoItem>\n                    {gender !== 0 && (\n                        <PersonalInfoItem>\n                            <MinorTitle>Gender</MinorTitle>\n                            <p>{gender === 2 ? 'Male' : 'Female'}</p>\n                        </PersonalInfoItem>\n                    )}\n                    {birthday && (\n                        <PersonalInfoItem>\n                            <MinorTitle>Birthday</MinorTitle>\n                            <p>\n                                {birthday} {!deathday && `(${age} years old)`}\n                            </p>\n                        </PersonalInfoItem>\n                    )}\n                    {deathday && (\n                        <PersonalInfoItem>\n                            <MinorTitle>Deahday</MinorTitle>\n                            <p>\n                                {deathday} ({age} years old)\n                            </p>\n                        </PersonalInfoItem>\n                    )}\n                    {place_of_birth && (\n                        <PersonalInfoItem>\n                            <MinorTitle>Place of birth</MinorTitle>\n                            <p>{place_of_birth}</p>\n                        </PersonalInfoItem>\n                    )}\n                </PersonalInfoList>\n            </Aside>\n            <InfoWrapper>\n                <ProfileWrapper>\n                    <PersonTitle>{name}</PersonTitle>\n                    <MinorTitle>Biography</MinorTitle>\n                    {biography?.map((el, i) => (\n                        <p key={i} style={{ marginBottom: '12px' }}>\n                            {el}\n                        </p>\n                    ))}\n                    {biography?.length === 0 && (\n                        <p>We don't have a biography for {name}.</p>\n                    )}\n                </ProfileWrapper>\n                <Credits acting={acting} crew={crew} />\n            </InfoWrapper>\n        </PersonWrapper>\n    );\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getDetails, getPersonById } from 'services/api';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { Loader } from 'components/Loader';\nimport { PersonInfo } from 'components/PersonInfo/PersonInfo';\nimport { Container } from 'components/Container/Container';\nimport { normalizePersonData } from 'services/normalize/normalizePersonData';\n\nconst PersonDetails = () => {\n    const { personId } = useParams();\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [personInfo, setPersonInfo] = useState({});\n    const [personCredits, setPersonCredits] = useState([]);\n    const [crew, setCrew] = useState([]);\n    const [totalCredits, setTotalCredits] = useState(0);\n\n    useEffect(() => {\n        setIsLoading(true);\n        getPersonById(personId)\n            .then(data => {\n                setPersonInfo(normalizePersonData(data));\n            })\n            .catch(err => {\n                setError(err.message);\n                toast(err.message);\n            })\n            .finally(() => {\n                getDetails('person', personId, '/combined_credits')\n                    .then(data => {\n                        setPersonCredits(data.cast);\n                        setCrew(data.crew);\n                        const length = data?.cast?.length + data?.crew?.length;\n                        setTotalCredits(length);\n                    })\n                    .catch(err => {\n                        setError(err.message);\n                        toast(err.message);\n                    });\n                setIsLoading(false);\n            });\n    }, [personId]);\n\n    return (\n        <section>\n            {isLoading && <Loader />}\n            <Container>\n                {error && <ToastContainer />}\n                {!isLoading && (\n                    <PersonInfo\n                        person={personInfo}\n                        acting={personCredits}\n                        crew={crew}\n                        total={totalCredits}\n                    />\n                )}\n            </Container>\n        </section>\n    );\n};\n\nexport default PersonDetails;\n","import { calcAge } from 'services/dateOperations';\n\nexport const normalizePersonData = data => {\n    const {\n        id,\n        biography,\n        known_for_department,\n        name,\n        gender,\n        birthday,\n        deathday,\n        place_of_birth,\n        profile_path,\n    } = data;\n    let biographyArr = [];\n    if (biography && biography !== '') {\n        biographyArr = biography.split('\\n\\n');\n    }\n\n    let calculateAge = calcAge(birthday, new Date());\n    if (deathday) {\n        calculateAge = calcAge(birthday, deathday);\n    }\n\n    return {\n        id,\n        biography: biographyArr,\n        known_for_department,\n        name,\n        gender,\n        birthday,\n        deathday,\n        age: calculateAge,\n        place_of_birth,\n        profile_path,\n    };\n};\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '49f12b338a85dcd14c7e661f8eadc77e';\n// const lang = '&language=uk-UA';\nconst lang = '&language=en-US';\n// const lang = '&language=ru-RU';\n\nexport const getMovies = async (mediaType, trands) => {\n    const { data } = await axios.get(\n        `trending/${mediaType}/${trands}?api_key=${API_KEY + lang}`\n    );\n    return data;\n};\n\nexport const getMediaByName = async (mediaTypes, q, page) => {\n    const { data } = await axios.get(\n        `search/${mediaTypes}?api_key=${API_KEY + lang}&page=${page}&query=${q}`\n    );\n    return data;\n};\n\nexport const getDetails = async (mediaType, movieId, details) => {\n    const { data } = await axios.get(\n        `${mediaType}/${movieId}${details}?api_key=${API_KEY + lang}`\n    );\n    return data;\n};\n\nexport const getTrailer = async (mediaType, movieId) => {\n    const { data } = await axios.get(\n        `${mediaType}/${movieId}/videos?api_key=${API_KEY + lang}`\n    );\n    return data;\n};\n\nexport const getPersonsByName = async (q, page) => {\n    const { data } = await axios.get(\n        `search/person?include_adult=false&api_key=${\n            API_KEY + lang\n        }&page=${page}&query=${q}`\n    );\n    return data;\n};\n\nexport const getPersonById = async personId => {\n    const { data } = await axios.get(\n        `person/${personId}?api_key=${API_KEY + lang}`\n    );\n    return data;\n};\n","export const formatDate = date => {\n    const options = {\n        // weekday: 'long',\n        year: 'numeric',\n        month: 'short',\n        day: '2-digit',\n    };\n    const newDate = new Date(date);\n    return newDate.toLocaleDateString('en-US', options);\n};\n\nexport const calcAge = (startDate, endDate) => {\n    return Math.trunc(\n        Math.abs(Date.parse(endDate) - Date.parse(startDate)) /\n            (24 * 3600 * 365.25 * 1000)\n    );\n};\n"],"names":["Loader","height","width","color","wrapperStyle","position","top","left","transform","wrapperClass","visible","ariaLabel","outerCircleColor","innerCircleColor","middleCircleColor","Item","styled","StyledLink","Link","ImageWrapper","Title","CreditsItem","credits","IMAGES_BASE_URL","map","id","credit_id","poster_path","movieTitle","personCharacter","releaseDate","media_type","vote_average","to","state","mediaTypes","srcSet","noPoster","style","objectFit","src","alt","CreditsList","Credits","acting","crew","personActing","data","nA","futureDate","Date","getTime","title","original_title","name","original_name","character","release_date","first_air_date","getFullYear","sortDate","Math","round","sort","a","b","normalizeActing","personInCrew","res","job","sortedResByDate","list","el","includes","push","result","normalizePersonInCrew","length","i","Object","keys","PersonWrapper","theme","colors","themeText","Aside","personBackground","AsideTitle","PersonalInfoList","PersonalInfoItem","MinorTitle","InfoWrapper","ProfileWrapper","PersonTitle","PersonInfo","person","total","biography","known_for_department","gender","birthday","deathday","age","place_of_birth","profile_path","marginBottom","personId","useParams","useState","isLoading","setIsLoading","error","setError","personInfo","setPersonInfo","personCredits","setPersonCredits","setCrew","totalCredits","setTotalCredits","useEffect","getPersonById","then","biographyArr","split","calculateAge","calcAge","normalizePersonData","catch","err","message","toast","finally","getDetails","cast","Container","axios","API_KEY","lang","getMovies","mediaType","trands","getMediaByName","q","page","movieId","details","getTrailer","formatDate","date","toLocaleDateString","year","month","day","startDate","endDate","trunc","abs","parse"],"sourceRoot":""}