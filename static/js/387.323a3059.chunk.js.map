{"version":3,"file":"static/js/387.323a3059.chunk.js","mappings":"8MAEaA,EAAYC,EAAAA,EAAAA,GAAH,+FACT,qBAAGC,MAAkBC,OAAOC,SAA5B,IAEW,qBAAGF,MAAkBG,cAArB,IAGXC,EAAWL,EAAAA,EAAAA,GAAH,oPAGL,mBAAoC,EAApC,EAAGC,MAAkBK,QAAQC,IAA7B,IAMHC,EAAcR,EAAAA,EAAAA,GAAH,sVAMX,qBAAGC,MAAkBC,OAAOO,KAA5B,IACW,qBAAGR,MAAkBC,OAAOQ,MAA5B,IAWXC,EAAYX,EAAAA,EAAAA,IAAH,uH,4DC3BTY,EAAO,WAChB,OAAgCC,EAAAA,EAAAA,MAAxBC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,QACpB,GAAkCC,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAwBJ,EAAAA,EAAAA,UAAS,MAAjC,eAAOK,EAAP,KAAaC,EAAb,KAGMC,GAAWC,EAAAA,EAAAA,MAsBjB,OApBAC,EAAAA,EAAAA,YAAU,WACDV,IACLG,GAAa,IACbQ,EAAAA,EAAAA,IACIZ,EACAC,EACe,UAAfD,EAAyB,WAAa,sBAErCa,MAAK,SAAAC,GACFN,GAAQO,EAAAA,EAAAA,IAAcD,EAAKP,MAC9B,IACAS,OAAM,SAAAC,GACHX,EAASW,EAAIC,UACbC,EAAAA,EAAAA,IAAMF,EAAIC,QACb,IACAE,SAAQ,WACLhB,GAAa,EAChB,IACR,GAAE,CAACJ,EAAYC,KAGZ,gCACKE,IAAa,SAACkB,EAAA,EAAD,KACT,OAAJd,QAAI,IAAJA,OAAA,EAAAA,EAAMe,QAAS,IACZ,iCACI,SAACrC,EAAD,oBACA,SAACM,EAAD,iBACKgB,QADL,IACKA,OADL,EACKA,EAAMgB,KACH,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,OAAQC,EAAvB,EAAuBA,WAAYC,EAAnC,EAAmCA,KAAnC,OACI,SAAClC,EAAD,WACI,UAAC,KAAD,CACImC,MAAO,CAAEC,MAAO,QAChBC,GAAE,kBAAaP,GACfQ,MAAO,CAAEC,KAAMxB,GAHnB,WAKI,SAACZ,EAAD,CACIqC,IAAKR,EACLS,IAAKR,KAET,wBACI,uBAAIA,OAER,uBAAIC,QAbMH,EADtB,UAsBX,OAAJlB,QAAI,IAAJA,OAAA,EAAAA,EAAMe,QAAS,IACZ,SAACrC,EAAD,oDAEHoB,IAAS,SAAC,KAAD,MAGrB,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastTitle = styled.h2`\n    color: ${({ theme }) => theme.colors.themeText};\n    margin-bottom: 20px;\n    transition: color ${({ theme }) => theme.baseTransition};\n`;\n\nexport const CastGrid = styled.ul`\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));\n    grid-gap: ${({ theme }) => theme.spacing.step * 5}px;\n    @media (min-width: 533px) {\n        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\n    }\n`;\n\nexport const CastElement = styled.li`\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    padding-bottom: 10px;\n    align-items: center;\n    color: ${({ theme }) => theme.colors.white};\n    background-color: ${({ theme }) => theme.colors.accent};\n    & p {\n        padding: 0 5px;\n        line-height: 1.3;\n        text-align: center;\n    }\n    & p:last-child {\n        margin-top: auto;\n    }\n`;\n\nexport const CastPhoto = styled.img`\n    width: 100%;\n    object-fit: cover;\n    object-position: top;\n    aspect-ratio: 3 / 4;\n`;\n","import { Link, useLocation, useParams } from 'react-router-dom';\nimport { CastElement, CastGrid, CastPhoto, CastTitle } from './Cast.styled';\nimport { useEffect, useState } from 'react';\nimport { getDetails } from 'services/api';\nimport { Loader } from 'components/Loader/Loader';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { normalizeCast } from 'services/normalize';\n\nexport const Cast = () => {\n    const { mediaTypes, mediaId } = useParams();\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState([]);\n    const [cast, setCast] = useState(null);\n    // const IMAGES_BASE_URL = 'https://image.tmdb.org/t/p/w500/';\n    // const IMAGES_BASE_URL = 'https://image.tmdb.org/t/p/w66_and_h66_face/';\n    const location = useLocation();\n\n    useEffect(() => {\n        if (!mediaId) return;\n        setIsLoading(true);\n        getDetails(\n            mediaTypes,\n            mediaId,\n            mediaTypes === 'movie' ? '/credits' : '/aggregate_credits'\n        )\n            .then(data => {\n                setCast(normalizeCast(data.cast));\n            })\n            .catch(err => {\n                setError(err.message);\n                toast(err.message);\n            })\n            .finally(() => {\n                setIsLoading(false);\n            });\n    }, [mediaTypes, mediaId]);\n\n    return (\n        <>\n            {isLoading && <Loader />}\n            {cast?.length > 0 && (\n                <>\n                    <CastTitle>Cast</CastTitle>\n                    <CastGrid>\n                        {cast?.map(\n                            ({ id, castId, poster, personName, role }) => (\n                                <CastElement key={castId}>\n                                    <Link\n                                        style={{ width: '100%' }}\n                                        to={`/person/${id}`}\n                                        state={{ from: location }}\n                                    >\n                                        <CastPhoto\n                                            src={poster}\n                                            alt={personName}\n                                        />\n                                        <p>\n                                            <b>{personName}</b>\n                                        </p>\n                                        <p>{role}</p>\n                                    </Link>\n                                </CastElement>\n                            )\n                        )}\n                    </CastGrid>\n                </>\n            )}\n            {cast?.length < 1 && (\n                <CastTitle>Sorry, no cast information available.</CastTitle>\n            )}\n            {error && <ToastContainer />}\n        </>\n    );\n};\n"],"names":["CastTitle","styled","theme","colors","themeText","baseTransition","CastGrid","spacing","step","CastElement","white","accent","CastPhoto","Cast","useParams","mediaTypes","mediaId","useState","isLoading","setIsLoading","error","setError","cast","setCast","location","useLocation","useEffect","getDetails","then","data","normalizeCast","catch","err","message","toast","finally","Loader","length","map","id","castId","poster","personName","role","style","width","to","state","from","src","alt"],"sourceRoot":""}