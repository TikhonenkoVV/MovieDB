{"version":3,"file":"static/js/910.4218e579.chunk.js","mappings":"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","sources":["common/services/normalize/normalizeCast.js","common/services/normalize/normalizeCrew.js","ui/pages/FullCast/FullCast.styled.js","ui/pages/FullCast/FullCast.jsx"],"sourcesContent":["export const normalizeCast = data => {\n    const res = data.map(\n        ({\n            id,\n            roles,\n            credit_id,\n            character,\n            name,\n            original_name,\n            profile_path,\n        }) => {\n            const castId = roles ? roles[0].credit_id : credit_id;\n            let role;\n            if (roles) role = roles[0].character;\n            else if (character) role = character;\n            if (!role || role === '') role = 'N/a';\n            const personName = name ?? original_name;\n            return {\n                id,\n                castId,\n                profile_path,\n                personName,\n                role,\n            };\n        }\n    );\n    return res;\n};\n","export const normalizeCrew = crew => {\n    const director = [];\n    const normalList = crew.map(\n        ({\n            id,\n            credit_id,\n            department,\n            job,\n            jobs,\n            name,\n            original_name,\n            profile_path,\n        }) => {\n            const personId = jobs ? jobs[0].credit_id : credit_id;\n            const personName = name ? name : original_name;\n            const person_job = jobs ? jobs[0].job : job;\n            if (\n                department.toLowerCase() === 'directing' &&\n                person_job.toLowerCase() === 'director'\n            )\n                director.push({\n                    id,\n                    credit_id: personId,\n                    personName,\n                    profile_path,\n                    job: person_job,\n                });\n            return {\n                id,\n                credit_id: personId,\n                department,\n                job: person_job,\n                personName,\n                profile_path,\n            };\n        }\n    );\n    const controlList = [];\n    normalList.map(el => {\n        if (!controlList.includes(el.department.toLowerCase())) {\n            return controlList.push(el.department.toLowerCase());\n        } else return null;\n    });\n\n    const list = [];\n    controlList.map(department => {\n        const arr = [];\n        normalList.map(el => {\n            if (el.department.toLowerCase() === department) {\n                const person = arr.find(element => element.id === el.id);\n                if (person) {\n                    return (person.job = `${person.job}, ${el.job}`);\n                } else return arr.push(el);\n            } else return null;\n        });\n        return list.push({ [department]: [...arr] });\n    });\n\n    return { crew: list, director: director };\n};\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const CreditsWrapper = styled.div`\n    @media ${({ theme }) => theme.breakpoints.m} {\n        display: flex;\n        gap: ${({ theme }) => theme.spacing.retreatM};\n    }\n    @media ${({ theme }) => theme.breakpoints.xl} {\n        gap: ${({ theme }) => theme.spacing.retreatL};\n    }\n`;\n\nexport const CastCrewWrapper = styled.div`\n    flex-basis: calc((100% - 24px) / 2);\n    color: ${({ theme }) => theme.colors.themeText};\n    border: 1px solid #808080;\n    padding: 16px;\n    &:not(:last-child) {\n        margin-bottom: ${({ theme }) => theme.spacing.retreatS};\n        @media ${({ theme }) => theme.breakpoints.s} {\n            margin-bottom: ${({ theme }) => theme.spacing.retreatM};\n        }\n        @media ${({ theme }) => theme.breakpoints.m} {\n            margin-bottom: 0;\n        }\n    }\n`;\n\nexport const MinorTitle = styled.h2`\n    margin-bottom: 16px;\n`;\n\nexport const CardListItem = styled.li`\n    &:not(:last-child) {\n        margin-bottom: 16px;\n    }\n`;\n\nexport const MajorTitle = styled.h3`\n    margin-bottom: 16px;\n`;\n\nexport const Card = styled.li`\n    &:not(:last-child) {\n        margin-bottom: 16px;\n    }\n`;\n\nexport const StyledLink = styled(Link)`\n    display: flex;\n    gap: 16px;\n`;\n\nexport const Poster = styled.img`\n    width: 66px;\n    aspect-ratio: 2/3;\n    border-radius: 5px;\n`;\n","import {\n    Card,\n    CastCrewWrapper,\n    StyledLink,\n    MinorTitle,\n    MajorTitle,\n    CardListItem,\n    Poster,\n    CreditsWrapper,\n} from './FullCast.styled';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport noPoster from '../../assets/images/no-poster_66.jpg';\nimport { getDetails } from 'common/services/api';\nimport { normalizeCast } from 'common/services/normalize/normalizeCast';\nimport { normalizeCrew } from 'common/services/normalize/normalizeCrew';\nimport { PROFILE_W185 } from 'common/constants';\nimport { Loader } from 'ui/shared/components/Loader';\n\nconst FullCast = () => {\n    const { mediaId } = useParams();\n\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [castArray, setCastArray] = useState();\n    const [crewArray, setCrewArray] = useState();\n\n    useEffect(() => {\n        setIsLoading(true);\n        const type = mediaId.split('-')[0];\n        const id = mediaId.split('-')[1];\n        getDetails(\n            type,\n            id,\n            type === 'movie' ? '/credits' : '/aggregate_credits'\n        )\n            .then(data => {\n                setCastArray(normalizeCast(data.cast));\n                setCrewArray(normalizeCrew(data.crew));\n            })\n            .catch(err => {\n                setError(err.message);\n                console.log('full cast', err);\n            })\n            .finally(() => setIsLoading(false));\n    }, [mediaId]);\n\n    return (\n        <>\n            {isLoading && <Loader />}\n            <CreditsWrapper>\n                {castArray?.length > 0 && (\n                    <CastCrewWrapper>\n                        <MinorTitle>Cast</MinorTitle>\n                        <ul>\n                            {castArray?.map(\n                                ({\n                                    id,\n                                    castId,\n                                    personName,\n                                    profile_path,\n                                    role,\n                                }) => (\n                                    <Card key={castId}>\n                                        <StyledLink to={`/persons/${id}`}>\n                                            <Poster\n                                                width={66}\n                                                src={\n                                                    profile_path\n                                                        ? PROFILE_W185 +\n                                                          profile_path\n                                                        : noPoster\n                                                }\n                                                alt={personName}\n                                            />\n                                            <div>\n                                                <h3>{personName}</h3>\n                                                <p>{role}</p>\n                                            </div>\n                                        </StyledLink>\n                                    </Card>\n                                )\n                            )}\n                        </ul>\n                    </CastCrewWrapper>\n                )}\n                {crewArray?.crew?.length > 0 && (\n                    <CastCrewWrapper>\n                        <MinorTitle>Crew</MinorTitle>\n                        <ul>\n                            {crewArray?.crew?.map(el => (\n                                <CardListItem key={Object.keys(el)[0]}>\n                                    <MajorTitle\n                                        style={{\n                                            textTransform: 'capitalize',\n                                        }}\n                                    >\n                                        {Object.keys(el)[0]}\n                                    </MajorTitle>\n                                    <ul>\n                                        {el[Object.keys(el)[0]]?.map(\n                                            ({\n                                                id,\n                                                credit_id,\n                                                job,\n                                                personName,\n                                                profile_path,\n                                            }) => (\n                                                <Card key={credit_id}>\n                                                    <StyledLink\n                                                        to={`/persons/${id}`}\n                                                    >\n                                                        <Poster\n                                                            width={66}\n                                                            src={\n                                                                profile_path\n                                                                    ? PROFILE_W185 +\n                                                                      profile_path\n                                                                    : noPoster\n                                                            }\n                                                            alt={personName}\n                                                        />\n                                                        <div>\n                                                            <h3>\n                                                                {personName}\n                                                            </h3>\n                                                            <p>{job}</p>\n                                                        </div>\n                                                    </StyledLink>\n                                                </Card>\n                                            )\n                                        )}\n                                    </ul>\n                                </CardListItem>\n                            ))}\n                        </ul>\n                    </CastCrewWrapper>\n                )}\n            </CreditsWrapper>\n            {error && <p>{error}</p>}\n        </>\n    );\n};\n\nexport default FullCast;\n"],"names":["normalizeCast","data","map","role","id","roles","credit_id","character","name","original_name","profile_path","castId","personName","normalizeCrew","crew","director","normalList","department","job","jobs","personId","person_job","toLowerCase","push","controlList","el","includes","list","arr","person","find","element","CreditsWrapper","styled","theme","breakpoints","m","spacing","retreatM","xl","retreatL","CastCrewWrapper","colors","themeText","retreatS","s","MinorTitle","CardListItem","MajorTitle","Card","StyledLink","Link","Poster","mediaId","useParams","useState","isLoading","setIsLoading","error","setError","castArray","setCastArray","crewArray","setCrewArray","useEffect","type","split","getDetails","then","cast","catch","err","message","console","log","finally","Loader","length","to","width","src","PROFILE_W185","noPoster","alt","style","textTransform","Object","keys"],"sourceRoot":""}