{"version":3,"file":"static/js/313.aeef046a.chunk.js","mappings":"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","sources":["components/Loader/Loader.styled.js","components/Loader/Loader.jsx","components/MediaList/MediaList.styled.js","components/MediaList/MediaList.jsx","services/normalize/normalizeMoviesData.js","components/ScoreBar/ScoreBar.styled.js","components/ScoreBar/ScoreBar.jsx","services/set-color.js","components/Select/Select.styled.js","components/Select/Select.jsx","components/TrendsTogler/TrendsTogler.styled.js","components/TrendsTogler/TrendsTogler.jsx","pages/Home.jsx","services/api.js","services/dateOperations.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Backdrop = styled.div`\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    opacity: 1;\n    background-color: #00000080;\n    transition: opacity 250ms, visibility 250ms;\n    z-index: 100;\n`;\n","import { ThreeCircles } from 'react-loader-spinner';\nimport { Backdrop } from './Loader.styled';\n\nexport const Loader = () => {\n    return (\n        <Backdrop>\n            <ThreeCircles\n                height=\"100\"\n                width=\"100\"\n                color=\"#369daf\"\n                wrapperStyle={{\n                    position: 'absolute',\n                    top: '50%',\n                    left: '50%',\n                    transform: 'translate(-50%, -50%)',\n                }}\n                wrapperClass=\"\"\n                visible={true}\n                ariaLabel=\"three-circles-rotating\"\n                outerCircleColor=\"\"\n                innerCircleColor=\"\"\n                middleCircleColor=\"\"\n            />\n        </Backdrop>\n    );\n};\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const StyledMedialist = styled.ul`\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(130px, 1fr));\n    grid-gap: ${({ theme }) => theme.spacing.step * 5}px;\n    @media (min-width: ${({ theme }) => theme.breakpoints.s}) {\n        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n    }\n`;\n\nexport const StyledMediaCard = styled.li`\n    display: flex;\n    flex-direction: column;\n    border: 2px solid ${({ theme }) => theme.colors.accent};\n    border-radius: 20px;\n    background-color: ${({ theme }) => theme.colors.accent};\n\n    transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1),\n        box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n    overflow: hidden;\n    cursor: zoom-in;\n\n    &:hover,\n    &:focus {\n        box-shadow: 0px 2px 10px 2px ${({ theme }) => theme.colors.shadow};\n    }\n    &:hover img,\n    &:focus img {\n        transform: scale(1.05);\n    }\n`;\n\nexport const MovieLink = styled(Link)`\n    display: flex;\n    flex-direction: column;\n    flex-grow: 1;\n`;\n\nexport const ImgWrapper = styled.div`\n    width: 100%;\n    overflow: hidden;\n    aspect-ratio: 2/3;\n    & img {\n        width: 100%;\n        height: 100%;\n        object-fit: cover;\n        transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    }\n`;\n\nexport const CardInfo = styled.div`\n    position: relative;\n    flex-grow: 1;\n    width: 100%;\n    min-height: 80px;\n    padding-top: 10px;\n    padding-right: 10px;\n    padding-bottom: 10px;\n    padding-left: 80px;\n    background-color: ${({ theme }) => theme.colors.accent};\n    color: ${({ theme }) => theme.colors.white};\n`;\n\nexport const MovieTitle = styled.h2`\n    margin-bottom: 6px;\n    text-align: left;\n    line-height: 1.5;\n    font-size: ${({ theme }) => theme.fontSizes.small};\n`;\n","import { normalizeMoviesData } from 'services/normalize/normalizeMoviesData';\nimport {\n    CardInfo,\n    ImgWrapper,\n    MovieLink,\n    MovieTitle,\n    StyledMediaCard,\n    StyledMedialist,\n} from './MediaList.styled';\nimport { ScoreBar } from 'components/ScoreBar/ScoreBar';\nimport noPoster from '../../images/no-poster.jpg';\n\nexport const MediaList = ({ media, mediaTypes }) => {\n    const IMAGES_BASE_URL = 'https://image.tmdb.org/t/p/w300_and_h450_bestv2';\n    const IMAGES_BASE_URL_RETINA =\n        'https://image.tmdb.org/t/p/w600_and_h900_bestv2';\n    const data = normalizeMoviesData(media, mediaTypes);\n\n    return (\n        <StyledMedialist>\n            {data.map(\n                ({\n                    id,\n                    vote_average,\n                    movie_title,\n                    media_type,\n                    poster_path,\n                    release,\n                }) => (\n                    <StyledMediaCard key={id}>\n                        <MovieLink\n                            to={\n                                media_type === 'movie'\n                                    ? `/movies/movie-${id}`\n                                    : `/tv-shows/tv-${id}`\n                            }\n                        >\n                            <ImgWrapper>\n                                <picture>\n                                    <source\n                                        srcSet={\n                                            poster_path\n                                                ? `${\n                                                      IMAGES_BASE_URL +\n                                                      poster_path\n                                                  } 1x, ${\n                                                      IMAGES_BASE_URL_RETINA +\n                                                      poster_path\n                                                  } 2x`\n                                                : noPoster\n                                        }\n                                    />\n                                    <img\n                                        src={\n                                            poster_path\n                                                ? `${\n                                                      IMAGES_BASE_URL +\n                                                      poster_path\n                                                  }`\n                                                : noPoster\n                                        }\n                                        alt={movie_title}\n                                    />\n                                </picture>\n                            </ImgWrapper>\n                            <CardInfo>\n                                <ScoreBar\n                                    rating={vote_average}\n                                    style={{\n                                        position: 'absolute',\n                                        top: 10,\n                                        left: 10,\n                                        zIndex: 2,\n                                    }}\n                                />\n                                <MovieTitle>{movie_title}</MovieTitle>\n                                <p>{release}</p>\n                            </CardInfo>\n                        </MovieLink>\n                    </StyledMediaCard>\n                )\n            )}\n        </StyledMedialist>\n    );\n};\n","import { formatDate } from 'services/dateOperations';\n\nexport const normalizeMoviesData = (data, mediaTypes) => {\n    // const IMAGES_BASE_URL = 'https://image.tmdb.org/t/p/w300/';\n    return data.map(\n        ({\n            id,\n            vote_average,\n            name,\n            title,\n            media_type,\n            original_title,\n            original_name,\n            poster_path,\n            release_date,\n            first_air_date,\n        }) => {\n            let release;\n            if (release_date) {\n                release = formatDate(release_date);\n            } else if (first_air_date) {\n                release = formatDate(first_air_date);\n            } else release = 'N/a';\n            const movie_title = name\n                ? name\n                : title\n                ? title\n                : original_name\n                ? original_name\n                : original_title;\n            return {\n                id,\n                movie_title,\n                media_type: media_type ? media_type : mediaTypes,\n\n                release,\n                vote_average:\n                    vote_average > 0 ? Math.round(vote_average * 10) : 'NR',\n                poster_path,\n            };\n        }\n    );\n};\n","import styled from '@emotion/styled';\n\nexport const Score = styled.span`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 60px;\n    height: 60px;\n    border: 1px dashed white;\n    border-radius: 50%;\n    & > span {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        position: relative;\n        border-radius: 50%;\n        width: 54px;\n        height: 54px;\n        background-color: #19171d;\n    }\n    pointer-events: none;\n`;\n\nexport const SpanStyled = styled.span`\n    color: ${({ theme }) => theme.colors.white};\n`;\n\nexport const ScoreProgressBar = styled.svg`\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%) rotate(270deg);\n`;\n\nexport const ScoreCircle = styled.circle`\n    fill: none;\n    stroke: ${({ color }) => color};\n    stroke-width: 6;\n    transform: translate(3px, 3px);\n    stroke-dasharray: 138;\n    stroke-dashoffset: ${({ length }) => length};\n`;\n\nexport const ScoreSpan = styled.span``;\n","import { useEffect, useRef, useState } from 'react';\nimport {\n    Score,\n    ScoreCircle,\n    ScoreProgressBar,\n    ScoreSpan,\n    SpanStyled,\n} from './ScoreBar.styled';\nimport { setColor } from 'services/set-color';\n\nexport const ScoreBar = ({ rating, style }) => {\n    const AnimCircle = useRef();\n    const [currentLength, setCurrentLength] = useState(0);\n    const [currenColor, setCurrentColor] = useState(0);\n\n    useEffect(() => {\n        const totalLength = AnimCircle.current.getTotalLength();\n        const circleLength = !isNaN(rating)\n            ? totalLength - (totalLength / 100) * rating\n            : 0;\n        setCurrentLength(circleLength);\n        setCurrentColor(!isNaN(rating) ? setColor(rating) : '#333');\n    }, [rating, currentLength]);\n\n    return (\n        <Score style={{ ...style }}>\n            <SpanStyled>\n                <ScoreProgressBar width={50} height={50}>\n                    <ScoreCircle\n                        color={currenColor}\n                        length={currentLength}\n                        ref={AnimCircle}\n                        cx={22}\n                        cy={22}\n                        r={22}\n                    ></ScoreCircle>\n                </ScoreProgressBar>\n                <ScoreSpan>{rating}</ScoreSpan>\n                {!isNaN(rating) && ' %'}\n            </SpanStyled>\n        </Score>\n    );\n};\n","export const setColor = percent => {\n    if (percent < 11) return 'red';\n    if (percent > 10 && percent < 21) return '#ff3000';\n    if (percent > 20 && percent < 31) return '#ff6000';\n    if (percent > 30 && percent < 41) return '#ff9000';\n    if (percent > 40 && percent < 51) return 'yellow';\n    if (percent > 50 && percent < 61) return '#90ff00';\n    if (percent > 60 && percent < 71) return '#60ff00';\n    if (percent > 70 && percent < 81) return '#30ff00';\n    if (percent > 80 && percent < 91) return 'green';\n    if (percent > 90) return 'green';\n    return 'gray';\n};\n","import styled from '@emotion/styled';\n\nexport const DivStyled = styled.div`\n    position: relative;\n    display: flex;\n    align-items: center;\n    background-color: transparent;\n    color: ${({ theme }) => theme.colors.themeText};\n    transition: color ${({ theme }) => theme.baseTransition};\n    cursor: pointer;\n    z-index: 3;\n`;\n\nexport const BtnSelectStyled = styled.button`\n    border: none;\n    padding-left: 5px;\n    padding-right: 20px;\n    background-color: transparent;\n    font-size: 18px;\n    font-weight: 500;\n    line-height: 1.5;\n    /* color: ${props => props.theme.colors.wrapperSelectorColor}; */\n    cursor: pointer;\n\n    &:before {\n        content: '';\n        position: absolute;\n        right: 0;\n        top: 50%;\n        border: 1px solid ${({ theme }) => theme.colors.themeText};\n        border-width: 0 2px 2px 0;\n        padding: 3px;\n        transform: translateY(${({ isOpen }) => (!isOpen ? '-80%' : '-30%')})\n            rotate(${({ isOpen }) => (!isOpen ? '45deg' : '-135deg')});\n        transition: transform 250ms;\n        cursor: pointer;\n    }\n`;\n\nexport const DivListStyled = styled.div`\n    position: absolute;\n    top: 100%;\n    /* width: 82px; */\n    border-radius: 8px;\n    padding: 18px;\n    margin: 0;\n    margin-top: 10px;\n    background-color: ${({ theme }) => theme.colors.mainBackground};\n    transform: ${props => (props.isOpen ? 'scaleY(1)' : 'scaleY(0)')};\n    transform-origin: top;\n    transition: transform 0.3s ease, opacity 0.3s ease;\n    opacity: ${props => (props.isOpen ? '1' : '0')};\n    box-shadow: ${props => props.theme.colors.boxShadowSelector};\n    border: 1px solid ${props => props.theme.colors.borderSelectorColor};\n`;\n\nexport const UlListStyled = styled.ul`\n    padding: 0;\n    margin: 0;\n`;\n\nexport const LiStyled = styled.li`\n    padding: 0;\n    margin: 0;\n    list-style-type: none;\n    font-size: 14px;\n    font-weight: 500;\n    line-height: 1.5;\n    color: ${props => props.theme.colors.textSelectorColor};\n\n    &:hover {\n        color: ${props => props.theme.colors.hoverSelectorColor};\n    }\n`;\n","import React, { useEffect, useState } from 'react';\nimport {\n    DivStyled,\n    BtnSelectStyled,\n    DivListStyled,\n    UlListStyled,\n    LiStyled,\n} from './Select.styled';\n\nexport const Select = ({ initial, onChange }) => {\n    const [currVal, setCurrVal] = useState('All');\n    const [isOpen, setIsOpen] = useState(false);\n\n    const [options, setOptions] = useState([\n        { all: 'All' },\n        { movie: 'Movie' },\n        { tv: 'Tv' },\n    ]);\n\n    const handleChange = event => {\n        event.stopPropagation();\n        setCurrVal(event.target.innerText);\n        onChange(event.target.getAttribute('data-id'));\n        setIsOpen(false);\n    };\n\n    const handleClick = event => {\n        event.stopPropagation();\n        setIsOpen(!isOpen);\n    };\n\n    useEffect(() => {\n        if (initial?.options) setOptions(initial.options);\n    }, [initial]);\n\n    return (\n        <DivStyled>\n            <BtnSelectStyled isOpen={isOpen} onClick={handleClick}>\n                {currVal ? currVal : 'Theme'}\n            </BtnSelectStyled>\n\n            <DivListStyled isOpen={isOpen} onClick={e => e.stopPropagation()}>\n                <UlListStyled>\n                    {options?.map(el => (\n                        <LiStyled\n                            data-id={Object.keys(el)}\n                            key={Object.keys(el)}\n                            onClick={handleChange}\n                        >\n                            {Object.values(el)}\n                        </LiStyled>\n                    ))}\n                </UlListStyled>\n            </DivListStyled>\n        </DivStyled>\n    );\n};\n","import styled from '@emotion/styled';\n\nexport const StyledTogler = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: stretch;\n    gap: 10px;\n`;\n\nexport const TogglerTitle = styled.h1`\n    text-align: center;\n    color: ${({ theme }) => theme.colors.themeText};\n    font-size: ${({ theme }) => theme.fontSizes.large};\n    transition: color ${({ theme }) => theme.baseTransition};\n    @media (min-width: ${({ theme }) => theme.breakpoints.xs}) {\n        font-size: ${({ theme }) => theme.fontSizes.xl};\n    }\n`;\n\nexport const TrendsBtnWrapper = styled.div`\n    position: relative;\n    display: flex;\n    border: 1px solid ${({ theme }) => theme.colors.hover};\n    border-radius: 17px;\n    overflow: hidden;\n`;\n\nexport const TrendsBtn = styled.button`\n    flex-basis: 50%;\n    width: 100px;\n    height: 100%;\n    color: ${({ theme }) => theme.colors.light};\n    font-size: ${({ theme }) => theme.fontSizes.small};\n    transition: background-color ${({ theme }) => theme.baseTransition},\n        color ${({ theme }) => theme.baseTransition};\n    @media (min-width: ${({ theme }) => theme.breakpoints.xs}) {\n        font-size: ${({ theme }) => theme.fontSizes.medium};\n    }\n    &:hover,\n    &:focus {\n        color: ${({ theme }) => theme.colors.themeText};\n    }\n    &.active {\n        color: ${({ theme }) => theme.colors.white};\n        background-color: ${({ theme }) => theme.colors.hover};\n    }\n`;\n","import { Select } from 'components/Select/Select';\nimport {\n    StyledTogler,\n    TogglerTitle,\n    TrendsBtn,\n    TrendsBtnWrapper,\n} from './TrendsTogler.styled';\n\nexport const TrendsToggler = ({\n    trands,\n    onBtnDayClick,\n    onBtnWeekClick,\n    hendleSelectChange,\n}) => {\n    return (\n        <StyledTogler>\n            <TogglerTitle>Trending</TogglerTitle>\n            <TrendsBtnWrapper>\n                <TrendsBtn\n                    datatype=\"day\"\n                    className={trands === 'day' ? 'active' : ''}\n                    type=\"button\"\n                    onClick={onBtnDayClick}\n                >\n                    today\n                </TrendsBtn>\n                <TrendsBtn\n                    className={trands === 'week' ? 'active' : ''}\n                    type=\"button\"\n                    onClick={onBtnWeekClick}\n                >\n                    this week\n                </TrendsBtn>\n            </TrendsBtnWrapper>\n            <Select onChange={hendleSelectChange} />\n        </StyledTogler>\n    );\n};\n","import { Loader } from 'components/Loader/Loader';\nimport { MediaList } from 'components/MediaList/MediaList';\nimport { useEffect, useState } from 'react';\nimport { getMovies } from 'services/api';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { Container } from 'components/Container/Container';\nimport { TrendsToggler } from 'components/TrendsTogler/TrendsTogler';\n\nconst Home = () => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [trands, setTrends] = useState('day');\n    const [mediaTypes, setMediaTypes] = useState('all');\n    const [movies, setMovies] = useState([]);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        setIsLoading(true);\n        getMovies(mediaTypes, trands)\n            .then(data => {\n                setMovies(data.results);\n            })\n            .catch(err => {\n                setError(err.message);\n                toast(err.message);\n            })\n\n            .finally(() => {\n                setIsLoading(false);\n            });\n    }, [mediaTypes, trands]);\n\n    const onBtnWeekClick = () => {\n        setTrends('week');\n    };\n\n    const onBtnDayClick = () => {\n        setTrends('day');\n    };\n\n    const hendleSelectChange = mediaType => {\n        setMediaTypes(mediaType);\n    };\n\n    return (\n        <>\n            {isLoading && <Loader />}\n            <section style={{ paddingTop: '24px' }}>\n                <Container>\n                    <TrendsToggler\n                        trands={trands}\n                        onBtnDayClick={onBtnDayClick}\n                        onBtnWeekClick={onBtnWeekClick}\n                        hendleSelectChange={hendleSelectChange}\n                    />\n                </Container>\n            </section>\n            <section>\n                <Container>\n                    <MediaList media={movies} />\n                </Container>\n            </section>\n            {error && <ToastContainer />}\n        </>\n    );\n};\n\nexport default Home;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '49f12b338a85dcd14c7e661f8eadc77e';\n// const lang = '&language=uk-UA';\nconst lang = '&language=en-US';\n// const lang = '&language=ru-RU';\n\nexport const getMovies = async (mediaType, trands) => {\n    const { data } = await axios.get(\n        `trending/${mediaType}/${trands}?api_key=${API_KEY + lang}`\n    );\n    return data;\n};\n\nexport const getMediaByName = async (mediaTypes, q, page) => {\n    const { data } = await axios.get(\n        `search/${mediaTypes}?api_key=${API_KEY + lang}&page=${page}&query=${q}`\n    );\n    return data;\n};\n\nexport const getDetails = async (mediaType, movieId, details) => {\n    const { data } = await axios.get(\n        `${mediaType}/${movieId}${details}?api_key=${API_KEY + lang}`\n    );\n    return data;\n};\n\nexport const getTrailer = async (mediaType, movieId) => {\n    const { data } = await axios.get(\n        `${mediaType}/${movieId}/videos?api_key=${API_KEY + lang}`\n    );\n    return data;\n};\n\nexport const getPersonsByName = async (q, page) => {\n    const { data } = await axios.get(\n        `search/person?include_adult=false&api_key=${\n            API_KEY + lang\n        }&page=${page}&query=${q}`\n    );\n    return data;\n};\n\nexport const getPersonById = async personId => {\n    const { data } = await axios.get(\n        `person/${personId}?api_key=${API_KEY + lang}`\n    );\n    return data;\n};\n","export const formatDate = date => {\n    const options = {\n        // weekday: 'long',\n        year: 'numeric',\n        month: 'short',\n        day: '2-digit',\n    };\n    const newDate = new Date(date);\n    return newDate.toLocaleDateString('en-US', options);\n};\n\nexport const calcAge = (startDate, endDate) => {\n    return Math.trunc(\n        Math.abs(Date.parse(endDate) - Date.parse(startDate)) /\n            (24 * 3600 * 365.25 * 1000)\n    );\n};\n"],"names":["Backdrop","styled","Loader","height","width","color","wrapperStyle","position","top","left","transform","wrapperClass","visible","ariaLabel","outerCircleColor","innerCircleColor","middleCircleColor","StyledMedialist","theme","spacing","step","breakpoints","s","StyledMediaCard","colors","accent","shadow","MovieLink","Link","ImgWrapper","CardInfo","white","MovieTitle","fontSizes","small","MediaList","media","mediaTypes","IMAGES_BASE_URL","data","map","release","id","vote_average","name","title","media_type","original_title","original_name","poster_path","release_date","first_air_date","formatDate","movie_title","Math","round","normalizeMoviesData","to","srcSet","noPoster","src","alt","ScoreBar","rating","style","zIndex","Score","SpanStyled","ScoreProgressBar","ScoreCircle","length","ScoreSpan","AnimCircle","useRef","useState","currentLength","setCurrentLength","currenColor","setCurrentColor","useEffect","percent","totalLength","current","getTotalLength","circleLength","isNaN","ref","cx","cy","r","DivStyled","themeText","baseTransition","BtnSelectStyled","props","wrapperSelectorColor","isOpen","DivListStyled","mainBackground","boxShadowSelector","borderSelectorColor","UlListStyled","LiStyled","textSelectorColor","hoverSelectorColor","Select","initial","onChange","currVal","setCurrVal","setIsOpen","all","movie","tv","options","setOptions","handleChange","event","stopPropagation","target","innerText","getAttribute","onClick","e","el","Object","keys","values","StyledTogler","TogglerTitle","large","xs","xl","TrendsBtnWrapper","hover","TrendsBtn","light","medium","TrendsToggler","trands","onBtnDayClick","onBtnWeekClick","hendleSelectChange","datatype","className","type","isLoading","setIsLoading","setTrends","setMediaTypes","movies","setMovies","error","setError","getMovies","then","results","catch","err","message","toast","finally","paddingTop","Container","mediaType","axios","API_KEY","lang","getMediaByName","q","page","getDetails","movieId","details","getTrailer","getPersonById","personId","date","Date","toLocaleDateString","year","month","day","calcAge","startDate","endDate","trunc","abs","parse"],"sourceRoot":""}