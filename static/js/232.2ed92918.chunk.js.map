{"version":3,"file":"static/js/232.2ed92918.chunk.js","mappings":"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","sources":["components/FullCast/FullCast.styled.js","components/FullCast/FullCast.jsx","components/Loader.jsx","services/api.js","services/normalize/normalizeCast.js","services/normalize/normalizeCrew.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const CreditsWrapper = styled.div`\n    @media ${({ theme }) => theme.breakpoints.m} {\n        display: flex;\n        gap: ${({ theme }) => theme.spacing.retreatM};\n    }\n    @media ${({ theme }) => theme.breakpoints.xl} {\n        gap: ${({ theme }) => theme.spacing.retreatL};\n    }\n`;\n\nexport const CastCrewWrapper = styled.div`\n    flex-basis: calc((100% - 24px) / 2);\n    color: ${({ theme }) => theme.colors.themeText};\n    border: 1px solid #808080;\n    padding: 16px;\n    &:not(:last-child) {\n        margin-bottom: ${({ theme }) => theme.spacing.retreatS};\n        @media ${({ theme }) => theme.breakpoints.s} {\n            margin-bottom: ${({ theme }) => theme.spacing.retreatM};\n        }\n        @media ${({ theme }) => theme.breakpoints.m} {\n            margin-bottom: 0;\n        }\n    }\n`;\n\nexport const MinorTitle = styled.h2`\n    margin-bottom: 16px;\n`;\n\nexport const CardListItem = styled.li`\n    &:not(:last-child) {\n        margin-bottom: 16px;\n    }\n`;\n\nexport const MajorTitle = styled.h3`\n    margin-bottom: 16px;\n`;\n\nexport const Card = styled.li`\n    &:not(:last-child) {\n        margin-bottom: 16px;\n    }\n`;\n\nexport const StyledLink = styled(Link)`\n    display: flex;\n    gap: 16px;\n`;\n\nexport const Poster = styled.img`\n    border-radius: 5px;\n`;\n","import { Container } from 'components/Container/Container';\nimport {\n    Card,\n    CastCrewWrapper,\n    StyledLink,\n    MinorTitle,\n    MajorTitle,\n    CardListItem,\n    Poster,\n    CreditsWrapper,\n} from './FullCast.styled';\nimport { useEffect, useState } from 'react';\nimport { getDetails } from 'services/api';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from 'components/Loader';\nimport { normalizeCast } from 'services/normalize/normalizeCast';\nimport noPoster from '../../images/no-poster_66.jpg';\nimport { normalizeCrew } from 'services/normalize/normalizeCrew';\n\nexport const FullCast = () => {\n    const IMAGES_BASE_URL = 'https://image.tmdb.org/t/p/w66_and_h66_face';\n    const IMAGES_BASE_URL_RETINA =\n        'https://image.tmdb.org/t/p/w132_and_h132_face';\n\n    const { mediaId } = useParams();\n\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [castArray, setCastArray] = useState();\n    const [crewArray, setCrewArray] = useState();\n\n    useEffect(() => {\n        setIsLoading(true);\n        const type = mediaId.split('-')[0];\n        const id = mediaId.split('-')[1];\n        getDetails(\n            type,\n            id,\n            type === 'movie' ? '/credits' : '/aggregate_credits'\n        )\n            .then(data => {\n                setCastArray(normalizeCast(data.cast));\n                setCrewArray(normalizeCrew(data.crew));\n            })\n            .catch(err => {\n                setError(err.message);\n                console.log('full cast', err);\n            })\n            .finally(() => setIsLoading(false));\n    }, [mediaId]);\n\n    return (\n        <section className=\"padding-top\">\n            {isLoading && <Loader />}\n            <Container>\n                <CreditsWrapper>\n                    {castArray?.length > 0 && (\n                        <CastCrewWrapper>\n                            <MinorTitle>Cast</MinorTitle>\n                            <ul>\n                                {castArray?.map(\n                                    ({\n                                        id,\n                                        castId,\n                                        personName,\n                                        profile_path,\n                                        role,\n                                    }) => (\n                                        <Card key={castId}>\n                                            <StyledLink to={`/person/${id}`}>\n                                                <picture>\n                                                    <source\n                                                        srcSet={\n                                                            profile_path\n                                                                ? `${\n                                                                      IMAGES_BASE_URL +\n                                                                      profile_path\n                                                                  } 1x, ${\n                                                                      IMAGES_BASE_URL_RETINA +\n                                                                      profile_path\n                                                                  } 2x`\n                                                                : noPoster\n                                                        }\n                                                    />\n\n                                                    <Poster\n                                                        src={\n                                                            profile_path\n                                                                ? IMAGES_BASE_URL +\n                                                                  profile_path\n                                                                : noPoster\n                                                        }\n                                                        alt={personName}\n                                                    />\n                                                </picture>\n                                                <div>\n                                                    <h3>{personName}</h3>\n                                                    <p>{role}</p>\n                                                </div>\n                                            </StyledLink>\n                                        </Card>\n                                    )\n                                )}\n                            </ul>\n                        </CastCrewWrapper>\n                    )}\n                    {crewArray?.crew?.length > 0 && (\n                        <CastCrewWrapper>\n                            <MinorTitle>Crew</MinorTitle>\n                            <ul>\n                                {crewArray?.crew?.map(el => (\n                                    <CardListItem key={Object.keys(el)[0]}>\n                                        <MajorTitle\n                                            style={{\n                                                textTransform: 'capitalize',\n                                            }}\n                                        >\n                                            {Object.keys(el)[0]}\n                                        </MajorTitle>\n                                        <ul>\n                                            {el[Object.keys(el)[0]]?.map(\n                                                ({\n                                                    id,\n                                                    credit_id,\n                                                    job,\n                                                    personName,\n                                                    profile_path,\n                                                }) => (\n                                                    <Card key={credit_id}>\n                                                        <StyledLink\n                                                            to={`/person/${id}`}\n                                                        >\n                                                            <picture>\n                                                                <source\n                                                                    srcSet={\n                                                                        profile_path\n                                                                            ? `${\n                                                                                  IMAGES_BASE_URL +\n                                                                                  profile_path\n                                                                              } 1x, ${\n                                                                                  IMAGES_BASE_URL_RETINA +\n                                                                                  profile_path\n                                                                              } 2x`\n                                                                            : noPoster\n                                                                    }\n                                                                />\n\n                                                                <Poster\n                                                                    src={\n                                                                        profile_path\n                                                                            ? IMAGES_BASE_URL +\n                                                                              profile_path\n                                                                            : noPoster\n                                                                    }\n                                                                    alt={\n                                                                        personName\n                                                                    }\n                                                                />\n                                                            </picture>\n                                                            <div>\n                                                                <h3>\n                                                                    {personName}\n                                                                </h3>\n                                                                <p>{job}</p>\n                                                            </div>\n                                                        </StyledLink>\n                                                    </Card>\n                                                )\n                                            )}\n                                        </ul>\n                                    </CardListItem>\n                                ))}\n                            </ul>\n                        </CastCrewWrapper>\n                    )}\n                </CreditsWrapper>\n            </Container>\n\n            {/* ЗВЕРНИ УВАГУ!!! */}\n            {error && <></>}\n        </section>\n    );\n};\n","import { ThreeCircles } from 'react-loader-spinner';\nimport { BackDrop } from './BackDrop/BackDrop';\n\nexport const Loader = () => {\n    return (\n        <BackDrop>\n            <ThreeCircles\n                height=\"100\"\n                width=\"100\"\n                color=\"#369daf\"\n                wrapperStyle={{\n                    position: 'absolute',\n                    top: '50%',\n                    left: '50%',\n                    transform: 'translate(-50%, -50%)',\n                }}\n                wrapperClass=\"\"\n                visible={true}\n                ariaLabel=\"three-circles-rotating\"\n                outerCircleColor=\"\"\n                innerCircleColor=\"\"\n                middleCircleColor=\"\"\n            />\n        </BackDrop>\n    );\n};\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '49f12b338a85dcd14c7e661f8eadc77e';\n// const lang = '&language=uk-UA';\nconst lang = '&language=en-US';\n// const lang = '&language=ru-RU';\n\nexport const getMovies = async (mediaType, trands) => {\n    const { data } = await axios.get(\n        `trending/${mediaType}/${trands}?api_key=${API_KEY + lang}`\n    );\n    return data;\n};\n\nexport const getMediaByName = async (mediaTypes, q, page) => {\n    const { data } = await axios.get(\n        `search/${mediaTypes}?api_key=${API_KEY + lang}&page=${page}&query=${q}`\n    );\n    return data;\n};\n\nexport const getDetails = async (mediaType, movieId, details) => {\n    const { data } = await axios.get(\n        `${mediaType}/${movieId}${details}?api_key=${API_KEY + lang}`\n    );\n    return data;\n};\n\nexport const getTrailer = async (mediaType, movieId) => {\n    const { data } = await axios.get(\n        `${mediaType}/${movieId}/videos?api_key=${API_KEY + lang}`\n    );\n    return data;\n};\n\nexport const getPersonsByName = async (q, page) => {\n    const { data } = await axios.get(\n        `search/person?include_adult=false&api_key=${\n            API_KEY + lang\n        }&page=${page}&query=${q}`\n    );\n    return data;\n};\n\nexport const getPersonById = async personId => {\n    const { data } = await axios.get(\n        `person/${personId}?api_key=${API_KEY + lang}`\n    );\n    return data;\n};\n","export const normalizeCast = data => {\n    // const IMAGES_BASE_URL = 'https://image.tmdb.org/t/p/w200/';\n    // const SMALL_IMAGES_BASE_URL =\n    //     'https://image.tmdb.org/t/p/w66_and_h66_face/';\n    const res = data.map(\n        ({\n            id,\n            roles,\n            credit_id,\n            character,\n            name,\n            original_name,\n            profile_path,\n        }) => {\n            const castId = roles ? roles[0].credit_id : credit_id;\n            let role;\n            if (roles) role = roles[0].character;\n            else if (character) role = character;\n            if (!role || role === '') role = 'N/a';\n            const personName = name ?? original_name;\n            return {\n                id,\n                castId,\n                profile_path,\n                personName,\n                role,\n            };\n        }\n    );\n    return res;\n};\n","export const normalizeCrew = crew => {\n    const director = [];\n    const normalList = crew.map(\n        ({\n            id,\n            credit_id,\n            department,\n            job,\n            jobs,\n            name,\n            original_name,\n            profile_path,\n        }) => {\n            const personId = jobs ? jobs[0].credit_id : credit_id;\n            const personName = name ? name : original_name;\n            const person_job = jobs ? jobs[0].job : job;\n            if (\n                department.toLowerCase() === 'directing' &&\n                person_job.toLowerCase() === 'director'\n            )\n                director.push({\n                    id,\n                    credit_id: personId,\n                    personName,\n                    profile_path,\n                    job: person_job,\n                });\n            return {\n                id,\n                credit_id: personId,\n                department,\n                job: person_job,\n                personName,\n                profile_path,\n            };\n        }\n    );\n    const controlList = [];\n    normalList.map(el => {\n        if (!controlList.includes(el.department.toLowerCase())) {\n            return controlList.push(el.department.toLowerCase());\n        } else return null;\n    });\n\n    const list = [];\n    controlList.map(department => {\n        const arr = [];\n        normalList.map(el => {\n            if (el.department.toLowerCase() === department) {\n                const person = arr.find(element => element.id === el.id);\n                if (person) {\n                    return (person.job = `${person.job}, ${el.job}`);\n                } else return arr.push(el);\n            } else return null;\n        });\n        return list.push({ [department]: [...arr] });\n    });\n\n    return { crew: list, director: director };\n};\n"],"names":["CreditsWrapper","styled","theme","breakpoints","m","spacing","retreatM","xl","retreatL","CastCrewWrapper","colors","themeText","retreatS","s","MinorTitle","CardListItem","MajorTitle","Card","StyledLink","Link","Poster","FullCast","IMAGES_BASE_URL","IMAGES_BASE_URL_RETINA","mediaId","useParams","useState","isLoading","setIsLoading","error","setError","castArray","setCastArray","crewArray","setCrewArray","useEffect","type","split","id","getDetails","then","data","normalizeCast","cast","normalizeCrew","crew","catch","err","message","console","log","finally","className","Loader","Container","length","map","castId","personName","profile_path","role","to","srcSet","noPoster","src","alt","el","style","textTransform","Object","keys","credit_id","job","height","width","color","wrapperStyle","position","top","left","transform","wrapperClass","visible","ariaLabel","outerCircleColor","innerCircleColor","middleCircleColor","axios","API_KEY","lang","getMovies","mediaType","trands","getMediaByName","mediaTypes","q","page","movieId","details","getTrailer","getPersonById","personId","roles","character","name","original_name","director","normalList","department","jobs","person_job","toLowerCase","push","controlList","includes","list","arr","person","find","element"],"sourceRoot":""}