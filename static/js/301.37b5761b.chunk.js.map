{"version":3,"file":"static/js/301.37b5761b.chunk.js","mappings":"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","sources":["components/Loader.jsx","components/MediaDetails/MediaDetails.styled.js","components/MediaDetails/MediaDetails.jsx","components/Page404/Page404.styled.js","components/Page404/Page404.jsx","services/api.js","services/dateOperations.js","services/normalize/normalizeMovieData.js"],"sourcesContent":["import { ThreeCircles } from 'react-loader-spinner';\nimport { BackDrop } from './BackDrop/BackDrop';\n\nexport const Loader = () => {\n    return (\n        <BackDrop>\n            <ThreeCircles\n                height=\"100\"\n                width=\"100\"\n                color=\"#369daf\"\n                wrapperStyle={{\n                    position: 'absolute',\n                    top: '50%',\n                    left: '50%',\n                    transform: 'translate(-50%, -50%)',\n                }}\n                wrapperClass=\"\"\n                visible={true}\n                ariaLabel=\"three-circles-rotating\"\n                outerCircleColor=\"\"\n                innerCircleColor=\"\"\n                middleCircleColor=\"\"\n            />\n        </BackDrop>\n    );\n};\n","import styled from '@emotion/styled';\n\nexport const StyledSection = styled.section`\n    padding-top: ${({ theme }) => theme.spacing.retreatS};\n    color: ${({ theme }) => theme.colors.themeText};\n    background-color: ${({ theme }) => theme.colors.personBackground};\n`;\n\nexport const MovieWrapper = styled.div`\n    @media screen and (${({ theme }) => theme.breakpoints.s}) {\n        display: flex;\n        gap: 20px;\n    }\n`;\n\nexport const MoviePoster = styled.img`\n    width: 100px;\n    object-fit: cover;\n    aspect-ratio: 2 / 3;\n`;\n\nexport const MovieInfoWrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    gap: 10px;\n    color: ${({ theme }) => theme.colors.themeText};\n    transition: color ${({ theme }) => theme.baseTransition};\n    @media ${({ theme }) => theme.breakpoints.m} {\n        gap: 20px;\n    }\n`;\n\nexport const MovieInfoTitle = styled.h1`\n    font-size: ${({ theme }) => theme.fontSizes.xxl};\n`;\n","import { Page404 } from 'components/Page404/Page404';\nimport { Suspense, useEffect, useState } from 'react';\nimport { Outlet, useParams } from 'react-router-dom';\nimport { getDetails } from 'services/api';\nimport {\n    MovieInfoTitle,\n    MovieInfoWrapper,\n    MoviePoster,\n    MovieWrapper,\n    StyledSection,\n} from './MediaDetails.styled';\nimport { Container } from 'components/Container/Container';\nimport { Loader } from 'components/Loader';\nimport { normalizeMovieData } from 'services/normalize/normalizeMovieData';\nimport noPoster from '../../images/no-poster.jpg';\n\nexport const MediaDetails = () => {\n    const IMAGES_BASE_URL = 'https://image.tmdb.org/t/p/w200';\n    const IMAGES_BASE_URL_RETINA = 'https://image.tmdb.org/t/p/w400';\n\n    const { mediaId } = useParams();\n\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [movie, setMovie] = useState(null);\n\n    useEffect(() => {\n        setIsLoading(true);\n        const type = mediaId.split('-')[0];\n        const id = mediaId.split('-')[1];\n        getDetails(type, id, '')\n            .then(data => setMovie(normalizeMovieData(data)))\n            .catch(err => setError(err.message))\n            .finally(() => setIsLoading(false));\n    }, [mediaId]);\n\n    return (\n        <>\n            {isLoading && <Loader />}\n            {movie && (\n                <StyledSection>\n                    <Container>\n                        <MovieWrapper>\n                            <picture>\n                                <source\n                                    srcSet={\n                                        movie.poster_path\n                                            ? `${\n                                                  IMAGES_BASE_URL +\n                                                  movie.poster_path\n                                              } 1x, ${\n                                                  IMAGES_BASE_URL_RETINA +\n                                                  movie.poster_path\n                                              } 2x`\n                                            : noPoster\n                                    }\n                                />\n\n                                <MoviePoster\n                                    src={\n                                        movie.poster_path\n                                            ? IMAGES_BASE_URL +\n                                              movie.poster_path\n                                            : noPoster\n                                    }\n                                    alt={movie.name}\n                                />\n                            </picture>\n                            <MovieInfoWrapper>\n                                <MovieInfoTitle>{movie.name}</MovieInfoTitle>\n                                {movie.release.release_date && (\n                                    <p>\n                                        {movie.release.title}\n                                        {movie.release.release_date}\n                                    </p>\n                                )}\n                                {movie.first_air.first_air_date && (\n                                    <p>\n                                        {movie.first_air.title}\n                                        {movie.first_air.first_air_date}\n                                    </p>\n                                )}\n                            </MovieInfoWrapper>\n                        </MovieWrapper>\n                    </Container>\n                </StyledSection>\n            )}\n            <Suspense>\n                <Outlet />\n            </Suspense>\n            {error && <Page404 />}\n        </>\n    );\n};\n","import styled from '@emotion/styled';\n\nexport const Page404Styled = styled.div`\n    width: 100%;\n    height: 100%;\n    text-align: center;\n    color: ${({ theme }) => theme.colors.white};\n    & h1 {\n        font-size: ${({ theme }) => theme.fontSizes.xxl};\n    }\n    & p {\n        font-size: ${({ theme }) => theme.fontSizes.xxl};\n    }\n    & img {\n        margin: 0 auto;\n    }\n`;\n\nexport const TitleStyled = styled.h1`\n    color: ${({ theme }) => theme.colors.themeText};\n    transition: color ${({ theme }) => theme.baseTransition};\n`;\n\nexport const InfoTextStyled = styled.p`\n    color: ${({ theme }) => theme.colors.themeText};\n    transition: color ${({ theme }) => theme.baseTransition};\n`;\n","import { InfoTextStyled, Page404Styled, TitleStyled } from './Page404.styled';\nimport page_404 from '../../images/no-found.png';\n\nexport const Page404 = () => {\n    return (\n        <Page404Styled>\n            <TitleStyled>Ooops!</TitleStyled>\n            <img width={300} src={page_404} alt=\"page-404\" />\n            <InfoTextStyled>Page no found</InfoTextStyled>\n        </Page404Styled>\n    );\n};\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '49f12b338a85dcd14c7e661f8eadc77e';\n// const lang = '&language=uk-UA';\nconst lang = '&language=en-US';\n// const lang = '&language=ru-RU';\n\nexport const getMovies = async (mediaType, trands) => {\n    const { data } = await axios.get(\n        `trending/${mediaType}/${trands}?api_key=${API_KEY + lang}`\n    );\n    return data;\n};\n\nexport const getMediaByName = async (mediaTypes, q, page) => {\n    const { data } = await axios.get(\n        `search/${mediaTypes}?api_key=${API_KEY + lang}&page=${page}&query=${q}`\n    );\n    return data;\n};\n\nexport const getDetails = async (mediaType, movieId, details) => {\n    const { data } = await axios.get(\n        `${mediaType}/${movieId}${details}?api_key=${API_KEY + lang}`\n    );\n    return data;\n};\n\nexport const getTrailer = async (mediaType, movieId) => {\n    const { data } = await axios.get(\n        `${mediaType}/${movieId}/videos?api_key=${API_KEY + lang}`\n    );\n    return data;\n};\n\nexport const getPersonsByName = async (q, page) => {\n    const { data } = await axios.get(\n        `search/person?include_adult=false&api_key=${\n            API_KEY + lang\n        }&page=${page}&query=${q}`\n    );\n    return data;\n};\n\nexport const getPersonById = async personId => {\n    const { data } = await axios.get(\n        `person/${personId}?api_key=${API_KEY + lang}`\n    );\n    return data;\n};\n","export const formatDate = date => {\n    const options = {\n        // weekday: 'long',\n        year: 'numeric',\n        month: 'short',\n        day: '2-digit',\n    };\n    const newDate = new Date(date);\n    return newDate.toLocaleDateString('en-US', options);\n};\n\nexport const calcAge = (startDate, endDate) => {\n    return Math.trunc(\n        Math.abs(Date.parse(endDate) - Date.parse(startDate)) /\n            (24 * 3600 * 365.25 * 1000)\n    );\n};\n","import { formatDate } from 'services/dateOperations';\n\nexport const normalizeMovieData = (data, mediaTypes) => {\n    const {\n        id,\n        media_type,\n        name,\n        original_name,\n        title,\n        original_title,\n        overview,\n        genres,\n        release_date,\n        first_air_date,\n        vote_average,\n        created_by,\n        poster_path,\n        backdrop_path,\n    } = data;\n    let newReleaseDate;\n    let newAirDate;\n    if (release_date) {\n        newReleaseDate = formatDate(release_date);\n    } else newReleaseDate = false;\n    if (first_air_date) {\n        newAirDate = formatDate(first_air_date);\n    } else newAirDate = false;\n    const rating = vote_average > 0 ? Math.round(vote_average * 10) : 'NR';\n    const personName = name\n        ? name\n        : original_name\n        ? original_name\n        : title\n        ? title\n        : original_title;\n    const creators = [];\n    created_by?.map(el =>\n        creators.push({ credit_id: el.credit_id, name: el.name })\n    );\n    return {\n        id,\n        vote_average: rating,\n        name: personName,\n        release: {\n            release_date: newReleaseDate,\n            title: 'Release date: ',\n        },\n        first_air: {\n            first_air_date: newAirDate,\n            title: 'First air date: ',\n        },\n        overview:\n            overview !== ''\n                ? overview\n                : 'Sorry, but there is no overview for this movie.',\n        genres:\n            genres.length > 0\n                ? genres\n                : [{ id: '', name: 'No information available' }],\n        poster_path,\n        backdrop_path,\n        media_type: media_type ? media_type : mediaTypes,\n        created_by: creators.length > 0 ? creators : null,\n    };\n};\n"],"names":["Loader","height","width","color","wrapperStyle","position","top","left","transform","wrapperClass","visible","ariaLabel","outerCircleColor","innerCircleColor","middleCircleColor","StyledSection","styled","theme","spacing","retreatS","colors","themeText","personBackground","MovieWrapper","breakpoints","s","MoviePoster","MovieInfoWrapper","baseTransition","m","MovieInfoTitle","fontSizes","xxl","MediaDetails","IMAGES_BASE_URL","mediaId","useParams","useState","isLoading","setIsLoading","error","setError","movie","setMovie","useEffect","type","split","id","getDetails","then","data","normalizeMovieData","catch","err","message","finally","Container","srcSet","poster_path","noPoster","src","alt","name","release","release_date","title","first_air","first_air_date","Suspense","Page404","Page404Styled","white","TitleStyled","InfoTextStyled","page_404","axios","API_KEY","lang","getMovies","mediaType","trands","getMediaByName","mediaTypes","q","page","movieId","details","getTrailer","getPersonById","personId","formatDate","date","Date","toLocaleDateString","year","month","day","calcAge","startDate","endDate","Math","trunc","abs","parse","newReleaseDate","newAirDate","media_type","original_name","original_title","overview","genres","vote_average","created_by","backdrop_path","rating","round","personName","creators","map","el","push","credit_id","length"],"sourceRoot":""}