{"version":3,"file":"static/js/313.fc8542d8.chunk.js","mappings":"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","sources":["components/MediaList/MediaList.styled.js","components/MediaList/MediaList.jsx","components/ScoreBar/ScoreBar.styled.js","components/ScoreBar/ScoreBar.jsx","services/set-color.js","components/Select/Select.styled.js","components/Select/Select.jsx","components/TrendsTogler/TrendsTogler.styled.js","components/TrendsTogler/TrendsTogler.jsx","pages/Home.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const StyledMedialist = styled.ul`\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(130px, 1fr));\n    grid-gap: ${({ theme }) => theme.spacing.step * 5}px;\n    @media (min-width: ${({ theme }) => theme.breakpoints.s}) {\n        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n    }\n`;\n\nexport const StyledMediaCard = styled.li`\n    display: flex;\n    flex-direction: column;\n    border: 2px solid ${({ theme }) => theme.colors.accent};\n    border-radius: 20px;\n    background-color: ${({ theme }) => theme.colors.accent};\n\n    transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1),\n        box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n    overflow: hidden;\n    cursor: zoom-in;\n\n    &:hover,\n    &:focus {\n        box-shadow: 0px 2px 10px 2px ${({ theme }) => theme.colors.shadow};\n    }\n    &:hover img,\n    &:focus img {\n        transform: scale(1.05);\n    }\n`;\n\nexport const MovieLink = styled(Link)`\n    display: flex;\n    flex-direction: column;\n    flex-grow: 1;\n`;\n\nexport const ImgWrapper = styled.div`\n    width: 100%;\n    overflow: hidden;\n    aspect-ratio: 2/3;\n    & img {\n        width: 100%;\n        height: 100%;\n        object-fit: cover;\n        transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    }\n`;\n\nexport const CardInfo = styled.div`\n    position: relative;\n    flex-grow: 1;\n    width: 100%;\n    min-height: 80px;\n    padding-top: 10px;\n    padding-right: 10px;\n    padding-bottom: 10px;\n    padding-left: 80px;\n    background-color: ${({ theme }) => theme.colors.accent};\n    color: ${({ theme }) => theme.colors.white};\n`;\n\nexport const MovieTitle = styled.h2`\n    margin-bottom: 6px;\n    text-align: left;\n    line-height: 1.5;\n    font-size: ${({ theme }) => theme.fontSizes.small};\n`;\n","import {\n    CardInfo,\n    ImgWrapper,\n    MovieLink,\n    MovieTitle,\n    StyledMediaCard,\n    StyledMedialist,\n} from './MediaList.styled';\nimport { normalizeMoviesData } from 'services/normalize';\nimport { ScoreBar } from 'components/ScoreBar/ScoreBar';\n\nexport const MediaList = ({ media, mediaTypes }) => {\n    const data = normalizeMoviesData(media, mediaTypes);\n\n    return (\n        <StyledMedialist>\n            {data.map(\n                ({\n                    id,\n                    vote_average,\n                    movie_title,\n                    media_type,\n                    poster,\n                    release,\n                }) => (\n                    <StyledMediaCard key={id}>\n                        <MovieLink\n                            to={\n                                media_type === 'movie'\n                                    ? `/movies/movie-${id}`\n                                    : `/tv-shows/tv-${id}`\n                            }\n                        >\n                            <ImgWrapper>\n                                <img src={poster} alt={movie_title} />\n                            </ImgWrapper>\n                            <CardInfo>\n                                <ScoreBar\n                                    rating={vote_average}\n                                    style={{\n                                        position: 'absolute',\n                                        top: 10,\n                                        left: 10,\n                                        zIndex: 2,\n                                    }}\n                                />\n                                <MovieTitle>{movie_title}</MovieTitle>\n                                <p>{release}</p>\n                            </CardInfo>\n                        </MovieLink>\n                    </StyledMediaCard>\n                )\n            )}\n        </StyledMedialist>\n    );\n};\n","import styled from '@emotion/styled';\n\nexport const Score = styled.span`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 60px;\n    height: 60px;\n    border: 1px dashed white;\n    border-radius: 50%;\n    & > span {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        position: relative;\n        border-radius: 50%;\n        width: 54px;\n        height: 54px;\n        background-color: #19171d;\n    }\n    pointer-events: none;\n`;\n\nexport const SpanStyled = styled.span`\n    color: ${({ theme }) => theme.colors.white};\n`;\n\nexport const ScoreProgressBar = styled.svg`\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%) rotate(270deg);\n`;\n\nexport const ScoreCircle = styled.circle`\n    fill: none;\n    stroke: ${({ color }) => color};\n    stroke-width: 6;\n    transform: translate(3px, 3px);\n    stroke-dasharray: 138;\n    stroke-dashoffset: ${({ length }) => length};\n`;\n\nexport const ScoreSpan = styled.span``;\n","import { useEffect, useRef, useState } from 'react';\nimport {\n    Score,\n    ScoreCircle,\n    ScoreProgressBar,\n    ScoreSpan,\n    SpanStyled,\n} from './ScoreBar.styled';\nimport { setColor } from 'services/set-color';\n\nexport const ScoreBar = ({ rating, style }) => {\n    const AnimCircle = useRef();\n    const [currentLength, setCurrentLength] = useState(0);\n    const [currenColor, setCurrentColor] = useState(0);\n\n    useEffect(() => {\n        const totalLength = AnimCircle.current.getTotalLength();\n        const circleLength = !isNaN(rating)\n            ? totalLength - (totalLength / 100) * rating\n            : 0;\n        setCurrentLength(circleLength);\n        setCurrentColor(!isNaN(rating) ? setColor(rating) : '#333');\n    }, [rating, currentLength]);\n\n    return (\n        <Score style={{ ...style }}>\n            <SpanStyled>\n                <ScoreProgressBar width={50} height={50}>\n                    <ScoreCircle\n                        color={currenColor}\n                        length={currentLength}\n                        ref={AnimCircle}\n                        cx={22}\n                        cy={22}\n                        r={22}\n                    ></ScoreCircle>\n                </ScoreProgressBar>\n                <ScoreSpan>{rating}</ScoreSpan>\n                {!isNaN(rating) && ' %'}\n            </SpanStyled>\n        </Score>\n    );\n};\n","export const setColor = percent => {\n    if (percent < 11) return 'red';\n    if (percent > 10 && percent < 21) return '#ff3000';\n    if (percent > 20 && percent < 31) return '#ff6000';\n    if (percent > 30 && percent < 41) return '#ff9000';\n    if (percent > 40 && percent < 51) return 'yellow';\n    if (percent > 50 && percent < 61) return '#90ff00';\n    if (percent > 60 && percent < 71) return '#60ff00';\n    if (percent > 70 && percent < 81) return '#30ff00';\n    if (percent > 80 && percent < 91) return 'green';\n    if (percent > 90) return 'green';\n    return 'gray';\n};\n","import styled from '@emotion/styled';\n\nexport const DivStyled = styled.div`\n    position: relative;\n    display: flex;\n    align-items: center;\n    background-color: transparent;\n    color: ${({ theme }) => theme.colors.themeText};\n    transition: color ${({ theme }) => theme.baseTransition};\n    cursor: pointer;\n    z-index: 3;\n`;\n\nexport const BtnSelectStyled = styled.button`\n    border: none;\n    padding-left: 5px;\n    padding-right: 20px;\n    background-color: transparent;\n    font-size: 18px;\n    font-weight: 500;\n    line-height: 1.5;\n    /* color: ${props => props.theme.colors.wrapperSelectorColor}; */\n    cursor: pointer;\n\n    &:before {\n        content: '';\n        position: absolute;\n        right: 0;\n        top: 50%;\n        border: 1px solid ${({ theme }) => theme.colors.themeText};\n        border-width: 0 2px 2px 0;\n        padding: 3px;\n        transform: translateY(${({ isOpen }) => (!isOpen ? '-80%' : '-30%')})\n            rotate(${({ isOpen }) => (!isOpen ? '45deg' : '-135deg')});\n        transition: transform 250ms;\n        cursor: pointer;\n    }\n`;\n\nexport const DivListStyled = styled.div`\n    position: absolute;\n    top: 100%;\n    /* width: 82px; */\n    border-radius: 8px;\n    padding: 18px;\n    margin: 0;\n    margin-top: 10px;\n    background-color: ${({ theme }) => theme.colors.mainBackground};\n    transform: ${props => (props.isOpen ? 'scaleY(1)' : 'scaleY(0)')};\n    transform-origin: top;\n    transition: transform 0.3s ease, opacity 0.3s ease;\n    opacity: ${props => (props.isOpen ? '1' : '0')};\n    box-shadow: ${props => props.theme.colors.boxShadowSelector};\n    border: 1px solid ${props => props.theme.colors.borderSelectorColor};\n`;\n\nexport const UlListStyled = styled.ul`\n    padding: 0;\n    margin: 0;\n`;\n\nexport const LiStyled = styled.li`\n    padding: 0;\n    margin: 0;\n    list-style-type: none;\n    font-size: 14px;\n    font-weight: 500;\n    line-height: 1.5;\n    color: ${props => props.theme.colors.textSelectorColor};\n\n    &:hover {\n        color: ${props => props.theme.colors.hoverSelectorColor};\n    }\n`;\n","import React, { useEffect, useState } from 'react';\nimport {\n    DivStyled,\n    BtnSelectStyled,\n    DivListStyled,\n    UlListStyled,\n    LiStyled,\n} from './Select.styled';\n\nexport const Select = ({ initial, onChange }) => {\n    const [currVal, setCurrVal] = useState('All');\n    const [isOpen, setIsOpen] = useState(false);\n\n    const [options, setOptions] = useState([\n        { all: 'All' },\n        { movie: 'Movie' },\n        { tv: 'Tv' },\n    ]);\n\n    const handleChange = event => {\n        event.stopPropagation();\n        setCurrVal(event.target.innerText);\n        onChange(event.target.getAttribute('data-id'));\n        setIsOpen(false);\n    };\n\n    const handleClick = event => {\n        event.stopPropagation();\n        setIsOpen(!isOpen);\n    };\n\n    useEffect(() => {\n        if (initial?.options) setOptions(initial.options);\n    }, [initial]);\n\n    return (\n        <DivStyled>\n            <BtnSelectStyled isOpen={isOpen} onClick={handleClick}>\n                {currVal ? currVal : 'Theme'}\n            </BtnSelectStyled>\n\n            <DivListStyled isOpen={isOpen} onClick={e => e.stopPropagation()}>\n                <UlListStyled>\n                    {options?.map(el => (\n                        <LiStyled\n                            data-id={Object.keys(el)}\n                            key={Object.keys(el)}\n                            onClick={handleChange}\n                        >\n                            {Object.values(el)}\n                        </LiStyled>\n                    ))}\n                </UlListStyled>\n            </DivListStyled>\n        </DivStyled>\n    );\n};\n","import styled from '@emotion/styled';\n\nexport const StyledTogler = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: stretch;\n    gap: 10px;\n    margin-bottom: 20px;\n`;\n\nexport const TogglerTitle = styled.h1`\n    text-align: center;\n    color: ${({ theme }) => theme.colors.themeText};\n    font-size: ${({ theme }) => theme.fontSizes.large};\n    transition: color ${({ theme }) => theme.baseTransition};\n    @media (min-width: ${({ theme }) => theme.breakpoints.xs}) {\n        font-size: ${({ theme }) => theme.fontSizes.xl};\n    }\n`;\n\nexport const TrendsBtnWrapper = styled.div`\n    position: relative;\n    display: flex;\n    border: 1px solid ${({ theme }) => theme.colors.hover};\n    border-radius: 17px;\n    overflow: hidden;\n`;\n\nexport const TrendsBtn = styled.button`\n    flex-basis: 50%;\n    width: 100px;\n    height: 100%;\n    color: ${({ theme }) => theme.colors.light};\n    font-size: ${({ theme }) => theme.fontSizes.small};\n    transition: background-color ${({ theme }) => theme.baseTransition},\n        color ${({ theme }) => theme.baseTransition};\n    @media (min-width: ${({ theme }) => theme.breakpoints.xs}) {\n        font-size: ${({ theme }) => theme.fontSizes.medium};\n    }\n    &:hover,\n    &:focus {\n        color: ${({ theme }) => theme.colors.themeText};\n    }\n    &.active {\n        color: ${({ theme }) => theme.colors.white};\n        background-color: ${({ theme }) => theme.colors.hover};\n    }\n`;\n","import { Select } from 'components/Select/Select';\nimport {\n    StyledTogler,\n    TogglerTitle,\n    TrendsBtn,\n    TrendsBtnWrapper,\n} from './TrendsTogler.styled';\n\nexport const TrendsToggler = ({\n    trands,\n    onBtnDayClick,\n    onBtnWeekClick,\n    hendleSelectChange,\n}) => {\n    return (\n        <StyledTogler>\n            <TogglerTitle>Trending</TogglerTitle>\n            <TrendsBtnWrapper>\n                <TrendsBtn\n                    datatype=\"day\"\n                    className={trands === 'day' ? 'active' : ''}\n                    type=\"button\"\n                    onClick={onBtnDayClick}\n                >\n                    today\n                </TrendsBtn>\n                <TrendsBtn\n                    className={trands === 'week' ? 'active' : ''}\n                    type=\"button\"\n                    onClick={onBtnWeekClick}\n                >\n                    this week\n                </TrendsBtn>\n            </TrendsBtnWrapper>\n            <Select onChange={hendleSelectChange} />\n        </StyledTogler>\n    );\n};\n","import { Loader } from 'components/Loader/Loader';\nimport { MediaList } from 'components/MediaList/MediaList';\nimport { useEffect, useState } from 'react';\nimport { getMovies } from 'services/api';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { Container } from 'components/Container/Container';\nimport { TrendsToggler } from 'components/TrendsTogler/TrendsTogler';\n\nconst Home = () => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [trands, setTrends] = useState('day');\n    const [mediaTypes, setMediaTypes] = useState('all');\n    const [movies, setMovies] = useState([]);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        setIsLoading(true);\n        getMovies(mediaTypes, trands)\n            .then(data => {\n                setMovies(data.results);\n            })\n            .catch(err => {\n                setError(err.message);\n                toast(err.message);\n            })\n\n            .finally(() => {\n                setIsLoading(false);\n            });\n    }, [mediaTypes, trands]);\n\n    const onBtnWeekClick = () => {\n        setTrends('week');\n    };\n\n    const onBtnDayClick = () => {\n        setTrends('day');\n    };\n\n    const hendleSelectChange = mediaType => {\n        setMediaTypes(mediaType);\n    };\n\n    return (\n        <Container>\n            {isLoading && <Loader />}\n            <TrendsToggler\n                trands={trands}\n                onBtnDayClick={onBtnDayClick}\n                onBtnWeekClick={onBtnWeekClick}\n                hendleSelectChange={hendleSelectChange}\n            />\n            <MediaList media={movies} />\n            {error && <ToastContainer />}\n        </Container>\n    );\n};\n\nexport default Home;\n"],"names":["StyledMedialist","styled","theme","spacing","step","breakpoints","s","StyledMediaCard","colors","accent","shadow","MovieLink","Link","ImgWrapper","CardInfo","white","MovieTitle","fontSizes","small","MediaList","media","mediaTypes","data","normalizeMoviesData","map","id","vote_average","movie_title","media_type","poster","release","to","src","alt","ScoreBar","rating","style","position","top","left","zIndex","Score","SpanStyled","ScoreProgressBar","ScoreCircle","color","length","ScoreSpan","AnimCircle","useRef","useState","currentLength","setCurrentLength","currenColor","setCurrentColor","useEffect","percent","totalLength","current","getTotalLength","circleLength","isNaN","width","height","ref","cx","cy","r","DivStyled","themeText","baseTransition","BtnSelectStyled","props","wrapperSelectorColor","isOpen","DivListStyled","mainBackground","boxShadowSelector","borderSelectorColor","UlListStyled","LiStyled","textSelectorColor","hoverSelectorColor","Select","initial","onChange","currVal","setCurrVal","setIsOpen","all","movie","tv","options","setOptions","handleChange","event","stopPropagation","target","innerText","getAttribute","onClick","e","el","Object","keys","values","StyledTogler","TogglerTitle","large","xs","xl","TrendsBtnWrapper","hover","TrendsBtn","light","medium","TrendsToggler","trands","onBtnDayClick","onBtnWeekClick","hendleSelectChange","datatype","className","type","isLoading","setIsLoading","setTrends","setMediaTypes","movies","setMovies","error","setError","getMovies","then","results","catch","err","message","toast","finally","Container","Loader","mediaType"],"sourceRoot":""}